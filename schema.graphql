type AvailableMechanic {
  mechanicId: UUID
  timeSlotId: String
  startTime: Datetime
}

"""
A connection to a list of `AvailableMechanic` values.
"""
type AvailableMechanicsConnection {
  """
  A list of `AvailableMechanic` objects.
  """
  nodes: [AvailableMechanic!]!

  """
  A list of edges which contains the `AvailableMechanic` and cursor to aid in pagination.
  """
  edges: [AvailableMechanicsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `AvailableMechanic` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AvailableMechanic` edge in the connection.
"""
type AvailableMechanicsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `AvailableMechanic` at the end of the edge.
  """
  node: AvailableMechanic!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type Booking {
  id: UUID!
  mechanicId: UUID
  timeSlotId: String!
  status: BookingStatus!
  longitude: Float!
  latitude: Float!
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime!
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int!

  """
  Reads a single `Mechanic` that is related to this `Booking`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `Booking`.
  """
  timeSlot: TimeSlot

  """
  Reads and enables pagination through a set of `BookingJob`.
  """
  bookingJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingJobFilter
  ): BookingJobsConnection!
}

"""
A condition to be used against `Booking` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BookingCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `mechanicId` field.
  """
  mechanicId: UUID

  """
  Checks for equality with the object’s `timeSlotId` field.
  """
  timeSlotId: String

  """
  Checks for equality with the object’s `status` field.
  """
  status: BookingStatus

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime
}

"""
A filter to be used against `Booking` object types. All fields are combined with a logical ‘and.’
"""
input BookingFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Filter by the object’s `mechanicId` field.
  """
  mechanicId: UUIDFilter

  """
  Filter by the object’s `timeSlotId` field.
  """
  timeSlotId: StringFilter

  """
  Filter by the object’s `status` field.
  """
  status: BookingStatusFilter

  """
  Filter by the object’s `createdAt` field.
  """
  createdAt: DatetimeFilter

  """
  Checks for all expressions in this list.
  """
  and: [BookingFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [BookingFilter!]

  """
  Negates the expression.
  """
  not: BookingFilter
}

"""
An input for mutations affecting `Booking`
"""
input BookingInput {
  id: UUID
  mechanicId: UUID
  timeSlotId: String!
  status: BookingStatus
  longitude: Float!
  latitude: Float!
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int!
}

type BookingJob {
  id: UUID!
  bookingId: UUID
  jobId: UUID

  """
  Reads a single `Booking` that is related to this `BookingJob`.
  """
  booking: Booking

  """
  Reads a single `Job` that is related to this `BookingJob`.
  """
  job: Job
}

"""
A condition to be used against `BookingJob` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BookingJobCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `bookingId` field.
  """
  bookingId: UUID

  """
  Checks for equality with the object’s `jobId` field.
  """
  jobId: UUID
}

"""
A filter to be used against `BookingJob` object types. All fields are combined with a logical ‘and.’
"""
input BookingJobFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Filter by the object’s `bookingId` field.
  """
  bookingId: UUIDFilter

  """
  Filter by the object’s `jobId` field.
  """
  jobId: UUIDFilter

  """
  Checks for all expressions in this list.
  """
  and: [BookingJobFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [BookingJobFilter!]

  """
  Negates the expression.
  """
  not: BookingJobFilter
}

"""
An input for mutations affecting `BookingJob`
"""
input BookingJobInput {
  id: UUID
  bookingId: UUID
  jobId: UUID
}

"""
Represents an update to a `BookingJob`. Fields that are set will be updated.
"""
input BookingJobPatch {
  id: UUID
  bookingId: UUID
  jobId: UUID
}

"""
A connection to a list of `BookingJob` values.
"""
type BookingJobsConnection {
  """
  A list of `BookingJob` objects.
  """
  nodes: [BookingJob!]!

  """
  A list of edges which contains the `BookingJob` and cursor to aid in pagination.
  """
  edges: [BookingJobsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `BookingJob` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `BookingJob` edge in the connection.
"""
type BookingJobsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `BookingJob` at the end of the edge.
  """
  node: BookingJob!
}

"""
Methods to use when ordering `BookingJob`.
"""
enum BookingJobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BOOKING_ID_ASC
  BOOKING_ID_DESC
  JOB_ID_ASC
  JOB_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Booking`. Fields that are set will be updated.
"""
input BookingPatch {
  id: UUID
  mechanicId: UUID
  timeSlotId: String
  status: BookingStatus
  longitude: Float
  latitude: Float
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int
}

"""
A connection to a list of `Booking` values.
"""
type BookingsConnection {
  """
  A list of `Booking` objects.
  """
  nodes: [Booking!]!

  """
  A list of edges which contains the `Booking` and cursor to aid in pagination.
  """
  edges: [BookingsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Booking` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Booking` edge in the connection.
"""
type BookingsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Booking` at the end of the edge.
  """
  node: Booking!
}

"""
Methods to use when ordering `Booking`.
"""
enum BookingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  TIME_SLOT_ID_ASC
  TIME_SLOT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum BookingStatus {
  RESERVED
  CONFIRMED
}

"""
A filter to be used against BookingStatus fields. All fields are combined with a logical ‘and.’
"""
input BookingStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: BookingStatus

  """
  Not equal to the specified value.
  """
  notEqualTo: BookingStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BookingStatus

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: BookingStatus

  """
  Included in the specified list.
  """
  in: [BookingStatus!]

  """
  Not included in the specified list.
  """
  notIn: [BookingStatus!]

  """
  Less than the specified value.
  """
  lessThan: BookingStatus

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: BookingStatus

  """
  Greater than the specified value.
  """
  greaterThan: BookingStatus

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: BookingStatus
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Boolean

  """
  Not equal to the specified value.
  """
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Boolean

  """
  Included in the specified list.
  """
  in: [Boolean!]

  """
  Not included in the specified list.
  """
  notIn: [Boolean!]

  """
  Less than the specified value.
  """
  lessThan: Boolean

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Boolean

  """
  Greater than the specified value.
  """
  greaterThan: Boolean

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Boolean
}

type Calendar {
  dateDimId: Int!
  dateActual: Date!
  epoch: BigInt!
  daySuffix: String!
  dayName: String!
  dayOfWeek: Int!
  dayOfMonth: Int!
  dayOfQuarter: Int!
  dayOfYear: Int!
  weekOfMonth: Int!
  weekOfYear: Int!
  weekOfYearIso: String!
  monthActual: Int!
  monthName: String!
  monthNameAbbreviated: String!
  quarterActual: Int!
  quarterName: String!
  yearActual: Int!
  firstDayOfWeek: Date!
  lastDayOfWeek: Date!
  firstDayOfMonth: Date!
  lastDayOfMonth: Date!
  firstDayOfQuarter: Date!
  lastDayOfQuarter: Date!
  firstDayOfYear: Date!
  lastDayOfYear: Date!
  mmyyyy: String!
  mmddyyyy: String!
  weekendIndr: Boolean!
}

"""
A condition to be used against `Calendar` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CalendarCondition {
  """
  Checks for equality with the object’s `dateDimId` field.
  """
  dateDimId: Int

  """
  Checks for equality with the object’s `dateActual` field.
  """
  dateActual: Date
}

"""
A filter to be used against `Calendar` object types. All fields are combined with a logical ‘and.’
"""
input CalendarFilter {
  """
  Filter by the object’s `dateDimId` field.
  """
  dateDimId: IntFilter

  """
  Filter by the object’s `dateActual` field.
  """
  dateActual: DateFilter

  """
  Checks for all expressions in this list.
  """
  and: [CalendarFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [CalendarFilter!]

  """
  Negates the expression.
  """
  not: CalendarFilter
}

"""
An input for mutations affecting `Calendar`
"""
input CalendarInput {
  dateDimId: Int!
  dateActual: Date!
  epoch: BigInt!
  daySuffix: String!
  dayName: String!
  dayOfWeek: Int!
  dayOfMonth: Int!
  dayOfQuarter: Int!
  dayOfYear: Int!
  weekOfMonth: Int!
  weekOfYear: Int!
  weekOfYearIso: String!
  monthActual: Int!
  monthName: String!
  monthNameAbbreviated: String!
  quarterActual: Int!
  quarterName: String!
  yearActual: Int!
  firstDayOfWeek: Date!
  lastDayOfWeek: Date!
  firstDayOfMonth: Date!
  lastDayOfMonth: Date!
  firstDayOfQuarter: Date!
  lastDayOfQuarter: Date!
  firstDayOfYear: Date!
  lastDayOfYear: Date!
  mmyyyy: String!
  mmddyyyy: String!
  weekendIndr: Boolean!
}

"""
Represents an update to a `Calendar`. Fields that are set will be updated.
"""
input CalendarPatch {
  dateDimId: Int
  dateActual: Date
  epoch: BigInt
  daySuffix: String
  dayName: String
  dayOfWeek: Int
  dayOfMonth: Int
  dayOfQuarter: Int
  dayOfYear: Int
  weekOfMonth: Int
  weekOfYear: Int
  weekOfYearIso: String
  monthActual: Int
  monthName: String
  monthNameAbbreviated: String
  quarterActual: Int
  quarterName: String
  yearActual: Int
  firstDayOfWeek: Date
  lastDayOfWeek: Date
  firstDayOfMonth: Date
  lastDayOfMonth: Date
  firstDayOfQuarter: Date
  lastDayOfQuarter: Date
  firstDayOfYear: Date
  lastDayOfYear: Date
  mmyyyy: String
  mmddyyyy: String
  weekendIndr: Boolean
}

"""
A connection to a list of `Calendar` values.
"""
type CalendarsConnection {
  """
  A list of `Calendar` objects.
  """
  nodes: [Calendar!]!

  """
  A list of edges which contains the `Calendar` and cursor to aid in pagination.
  """
  edges: [CalendarsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Calendar` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Calendar` edge in the connection.
"""
type CalendarsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Calendar` at the end of the edge.
  """
  node: Calendar!
}

"""
Methods to use when ordering `Calendar`.
"""
enum CalendarsOrderBy {
  NATURAL
  DATE_DIM_ID_ASC
  DATE_DIM_ID_DESC
  DATE_ACTUAL_ASC
  DATE_ACTUAL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContactWhenGeohashAvailable {
  id: UUID!
  geohash: String!
  email: String
  createdAt: Datetime
}

"""
A condition to be used against `ContactWhenGeohashAvailable` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ContactWhenGeohashAvailableCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID
}

"""
A filter to be used against `ContactWhenGeohashAvailable` object types. All fields are combined with a logical ‘and.’
"""
input ContactWhenGeohashAvailableFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Checks for all expressions in this list.
  """
  and: [ContactWhenGeohashAvailableFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [ContactWhenGeohashAvailableFilter!]

  """
  Negates the expression.
  """
  not: ContactWhenGeohashAvailableFilter
}

"""
An input for mutations affecting `ContactWhenGeohashAvailable`
"""
input ContactWhenGeohashAvailableInput {
  id: UUID
  geohash: String!
  email: String
  createdAt: Datetime
}

"""
Represents an update to a `ContactWhenGeohashAvailable`. Fields that are set will be updated.
"""
input ContactWhenGeohashAvailablePatch {
  id: UUID
  geohash: String
  email: String
  createdAt: Datetime
}

"""
A connection to a list of `ContactWhenGeohashAvailable` values.
"""
type ContactWhenGeohashAvailablesConnection {
  """
  A list of `ContactWhenGeohashAvailable` objects.
  """
  nodes: [ContactWhenGeohashAvailable!]!

  """
  A list of edges which contains the `ContactWhenGeohashAvailable` and cursor to aid in pagination.
  """
  edges: [ContactWhenGeohashAvailablesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ContactWhenGeohashAvailable` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContactWhenGeohashAvailable` edge in the connection.
"""
type ContactWhenGeohashAvailablesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ContactWhenGeohashAvailable` at the end of the edge.
  """
  node: ContactWhenGeohashAvailable!
}

"""
Methods to use when ordering `ContactWhenGeohashAvailable`.
"""
enum ContactWhenGeohashAvailablesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
All input for the create `Booking` mutation.
"""
input CreateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Booking` to be created by this mutation.
  """
  booking: BookingInput!
}

"""
All input for the create `BookingJob` mutation.
"""
input CreateBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `BookingJob` to be created by this mutation.
  """
  bookingJob: BookingJobInput!
}

"""
The output of our create `BookingJob` mutation.
"""
type CreateBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `BookingJob` that was created by this mutation.
  """
  bookingJob: BookingJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Booking` that is related to this `BookingJob`.
  """
  booking: Booking

  """
  Reads a single `Job` that is related to this `BookingJob`.
  """
  job: Job

  """
  An edge for our `BookingJob`. May be used by Relay 1.
  """
  bookingJobEdge(
    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""
The output of our create `Booking` mutation.
"""
type CreateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Booking` that was created by this mutation.
  """
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `Booking`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `Booking`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `Booking`. May be used by Relay 1.
  """
  bookingEdge(
    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""
All input for the create `Calendar` mutation.
"""
input CreateCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Calendar` to be created by this mutation.
  """
  calendar: CalendarInput!
}

"""
The output of our create `Calendar` mutation.
"""
type CreateCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Calendar` that was created by this mutation.
  """
  calendar: Calendar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Calendar`. May be used by Relay 1.
  """
  calendarEdge(
    """
    The method to use when ordering `Calendar`.
    """
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""
All input for the create `ContactWhenGeohashAvailable` mutation.
"""
input CreateContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ContactWhenGeohashAvailable` to be created by this mutation.
  """
  contactWhenGeohashAvailable: ContactWhenGeohashAvailableInput!
}

"""
The output of our create `ContactWhenGeohashAvailable` mutation.
"""
type CreateContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ContactWhenGeohashAvailable` that was created by this mutation.
  """
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1.
  """
  contactWhenGeohashAvailableEdge(
    """
    The method to use when ordering `ContactWhenGeohashAvailable`.
    """
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""
All input for the create `FlywaySchemaHistory` mutation.
"""
input CreateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FlywaySchemaHistory` to be created by this mutation.
  """
  flywaySchemaHistory: FlywaySchemaHistoryInput!
}

"""
The output of our create `FlywaySchemaHistory` mutation.
"""
type CreateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FlywaySchemaHistory` that was created by this mutation.
  """
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FlywaySchemaHistory`. May be used by Relay 1.
  """
  flywaySchemaHistoryEdge(
    """
    The method to use when ordering `FlywaySchemaHistory`.
    """
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""
All input for the create `Job` mutation.
"""
input CreateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Job` to be created by this mutation.
  """
  job: JobInput!
}

"""
The output of our create `Job` mutation.
"""
type CreateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Job` that was created by this mutation.
  """
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Job`. May be used by Relay 1.
  """
  jobEdge(
    """
    The method to use when ordering `Job`.
    """
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""
All input for the create `LogClientError` mutation.
"""
input CreateLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `LogClientError` to be created by this mutation.
  """
  logClientError: LogClientErrorInput!
}

"""
The output of our create `LogClientError` mutation.
"""
type CreateLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `LogClientError` that was created by this mutation.
  """
  logClientError: LogClientError

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `LogClientError`. May be used by Relay 1.
  """
  logClientErrorEdge(
    """
    The method to use when ordering `LogClientError`.
    """
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""
All input for the create `Mechanic` mutation.
"""
input CreateMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Mechanic` to be created by this mutation.
  """
  mechanic: MechanicInput!
}

"""
All input for the create `MechanicJob` mutation.
"""
input CreateMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `MechanicJob` to be created by this mutation.
  """
  mechanicJob: MechanicJobInput!
}

"""
The output of our create `MechanicJob` mutation.
"""
type CreateMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MechanicJob` that was created by this mutation.
  """
  mechanicJob: MechanicJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `MechanicJob`.
  """
  mechanic: Mechanic

  """
  Reads a single `Job` that is related to this `MechanicJob`.
  """
  job: Job

  """
  An edge for our `MechanicJob`. May be used by Relay 1.
  """
  mechanicJobEdge(
    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""
The output of our create `Mechanic` mutation.
"""
type CreateMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Mechanic` that was created by this mutation.
  """
  mechanic: Mechanic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Mechanic`. May be used by Relay 1.
  """
  mechanicEdge(
    """
    The method to use when ordering `Mechanic`.
    """
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""
All input for the create `TimeSlot` mutation.
"""
input CreateTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TimeSlot` to be created by this mutation.
  """
  timeSlot: TimeSlotInput!
}

"""
The output of our create `TimeSlot` mutation.
"""
type CreateTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TimeSlot` that was created by this mutation.
  """
  timeSlot: TimeSlot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TimeSlot`. May be used by Relay 1.
  """
  timeSlotEdge(
    """
    The method to use when ordering `TimeSlot`.
    """
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""
All input for the create `WorkingTime` mutation.
"""
input CreateWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `WorkingTime` to be created by this mutation.
  """
  workingTime: WorkingTimeInput!
}

"""
The output of our create `WorkingTime` mutation.
"""
type CreateWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `WorkingTime` that was created by this mutation.
  """
  workingTime: WorkingTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `WorkingTime`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `WorkingTime`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `WorkingTime`. May be used by Relay 1.
  """
  workingTimeEdge(
    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
The day, does not include a time.
"""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Date

  """
  Not equal to the specified value.
  """
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Date

  """
  Included in the specified list.
  """
  in: [Date!]

  """
  Not included in the specified list.
  """
  notIn: [Date!]

  """
  Less than the specified value.
  """
  lessThan: Date

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Date

  """
  Greater than the specified value.
  """
  greaterThan: Date

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Date
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Datetime

  """
  Not equal to the specified value.
  """
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Datetime

  """
  Included in the specified list.
  """
  in: [Datetime!]

  """
  Not included in the specified list.
  """
  notIn: [Datetime!]

  """
  Less than the specified value.
  """
  lessThan: Datetime

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Datetime

  """
  Greater than the specified value.
  """
  greaterThan: Datetime

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Datetime
}

"""
All input for the `deleteBooking` mutation.
"""
input DeleteBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteBookingJob` mutation.
"""
input DeleteBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `BookingJob` mutation.
"""
type DeleteBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `BookingJob` that was deleted by this mutation.
  """
  bookingJob: BookingJob
  deletedBookingJobNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Booking` that is related to this `BookingJob`.
  """
  booking: Booking

  """
  Reads a single `Job` that is related to this `BookingJob`.
  """
  job: Job

  """
  An edge for our `BookingJob`. May be used by Relay 1.
  """
  bookingJobEdge(
    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""
The output of our delete `Booking` mutation.
"""
type DeleteBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Booking` that was deleted by this mutation.
  """
  booking: Booking
  deletedBookingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `Booking`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `Booking`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `Booking`. May be used by Relay 1.
  """
  bookingEdge(
    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""
All input for the `deleteCalendar` mutation.
"""
input DeleteCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateDimId: Int!
}

"""
The output of our delete `Calendar` mutation.
"""
type DeleteCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Calendar` that was deleted by this mutation.
  """
  calendar: Calendar
  deletedCalendarNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Calendar`. May be used by Relay 1.
  """
  calendarEdge(
    """
    The method to use when ordering `Calendar`.
    """
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""
All input for the `deleteContactWhenGeohashAvailable` mutation.
"""
input DeleteContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `ContactWhenGeohashAvailable` mutation.
"""
type DeleteContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ContactWhenGeohashAvailable` that was deleted by this mutation.
  """
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable
  deletedContactWhenGeohashAvailableNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1.
  """
  contactWhenGeohashAvailableEdge(
    """
    The method to use when ordering `ContactWhenGeohashAvailable`.
    """
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""
All input for the `deleteFlywaySchemaHistory` mutation.
"""
input DeleteFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!
}

"""
The output of our delete `FlywaySchemaHistory` mutation.
"""
type DeleteFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FlywaySchemaHistory` that was deleted by this mutation.
  """
  flywaySchemaHistory: FlywaySchemaHistory
  deletedFlywaySchemaHistoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FlywaySchemaHistory`. May be used by Relay 1.
  """
  flywaySchemaHistoryEdge(
    """
    The method to use when ordering `FlywaySchemaHistory`.
    """
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""
All input for the `deleteJob` mutation.
"""
input DeleteJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `Job` mutation.
"""
type DeleteJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Job` that was deleted by this mutation.
  """
  job: Job
  deletedJobNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Job`. May be used by Relay 1.
  """
  jobEdge(
    """
    The method to use when ordering `Job`.
    """
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""
All input for the `deleteLogClientError` mutation.
"""
input DeleteLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `LogClientError` mutation.
"""
type DeleteLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `LogClientError` that was deleted by this mutation.
  """
  logClientError: LogClientError
  deletedLogClientErrorNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `LogClientError`. May be used by Relay 1.
  """
  logClientErrorEdge(
    """
    The method to use when ordering `LogClientError`.
    """
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""
All input for the `deleteMechanic` mutation.
"""
input DeleteMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteMechanicJob` mutation.
"""
input DeleteMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `MechanicJob` mutation.
"""
type DeleteMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MechanicJob` that was deleted by this mutation.
  """
  mechanicJob: MechanicJob
  deletedMechanicJobNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `MechanicJob`.
  """
  mechanic: Mechanic

  """
  Reads a single `Job` that is related to this `MechanicJob`.
  """
  job: Job

  """
  An edge for our `MechanicJob`. May be used by Relay 1.
  """
  mechanicJobEdge(
    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""
The output of our delete `Mechanic` mutation.
"""
type DeleteMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Mechanic` that was deleted by this mutation.
  """
  mechanic: Mechanic
  deletedMechanicNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Mechanic`. May be used by Relay 1.
  """
  mechanicEdge(
    """
    The method to use when ordering `Mechanic`.
    """
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""
All input for the `deleteTimeSlot` mutation.
"""
input DeleteTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  E.g. 2019-12-31__09
  """
  id: String!
}

"""
The output of our delete `TimeSlot` mutation.
"""
type DeleteTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TimeSlot` that was deleted by this mutation.
  """
  timeSlot: TimeSlot
  deletedTimeSlotNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TimeSlot`. May be used by Relay 1.
  """
  timeSlotEdge(
    """
    The method to use when ordering `TimeSlot`.
    """
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""
All input for the `deleteWorkingTime` mutation.
"""
input DeleteWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mechanicId: UUID!
  timeSlotId: String!
}

"""
The output of our delete `WorkingTime` mutation.
"""
type DeleteWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `WorkingTime` that was deleted by this mutation.
  """
  workingTime: WorkingTime
  deletedWorkingTimeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `WorkingTime`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `WorkingTime`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `WorkingTime`. May be used by Relay 1.
  """
  workingTimeEdge(
    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""
A connection to a list of `FlywaySchemaHistory` values.
"""
type FlywaySchemaHistoriesConnection {
  """
  A list of `FlywaySchemaHistory` objects.
  """
  nodes: [FlywaySchemaHistory!]!

  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FlywaySchemaHistory` edge in the connection.
"""
type FlywaySchemaHistoriesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FlywaySchemaHistory` at the end of the edge.
  """
  node: FlywaySchemaHistory!
}

"""
Methods to use when ordering `FlywaySchemaHistory`.
"""
enum FlywaySchemaHistoriesOrderBy {
  NATURAL
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FlywaySchemaHistory {
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime!
  executionTime: Int!
  success: Boolean!
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """
  Checks for equality with the object’s `installedRank` field.
  """
  installedRank: Int

  """
  Checks for equality with the object’s `success` field.
  """
  success: Boolean
}

"""
A filter to be used against `FlywaySchemaHistory` object types. All fields are combined with a logical ‘and.’
"""
input FlywaySchemaHistoryFilter {
  """
  Filter by the object’s `installedRank` field.
  """
  installedRank: IntFilter

  """
  Filter by the object’s `success` field.
  """
  success: BooleanFilter

  """
  Checks for all expressions in this list.
  """
  and: [FlywaySchemaHistoryFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [FlywaySchemaHistoryFilter!]

  """
  Negates the expression.
  """
  not: FlywaySchemaHistoryFilter
}

"""
An input for mutations affecting `FlywaySchemaHistory`
"""
input FlywaySchemaHistoryInput {
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime
  executionTime: Int!
  success: Boolean!
}

"""
Represents an update to a `FlywaySchemaHistory`. Fields that are set will be updated.
"""
input FlywaySchemaHistoryPatch {
  installedRank: Int
  version: String
  description: String
  type: String
  script: String
  checksum: Int
  installedBy: String
  installedOn: Datetime
  executionTime: Int
  success: Boolean
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Int

  """
  Not equal to the specified value.
  """
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Int

  """
  Included in the specified list.
  """
  in: [Int!]

  """
  Not included in the specified list.
  """
  notIn: [Int!]

  """
  Less than the specified value.
  """
  lessThan: Int

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Int

  """
  Greater than the specified value.
  """
  greaterThan: Int

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Int
}

type Job {
  id: UUID!
  description: String!
  minutesToComplete: Float!
  createdAt: Datetime
  price: Float!

  """
  Reads and enables pagination through a set of `MechanicJob`.
  """
  mechanicJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MechanicJobFilter
  ): MechanicJobsConnection!

  """
  Reads and enables pagination through a set of `BookingJob`.
  """
  bookingJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingJobFilter
  ): BookingJobsConnection!
}

"""
A condition to be used against `Job` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input JobCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID
}

"""
A filter to be used against `Job` object types. All fields are combined with a logical ‘and.’
"""
input JobFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Checks for all expressions in this list.
  """
  and: [JobFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [JobFilter!]

  """
  Negates the expression.
  """
  not: JobFilter
}

"""
An input for mutations affecting `Job`
"""
input JobInput {
  id: UUID
  description: String!
  minutesToComplete: Float!
  createdAt: Datetime
  price: Float
}

"""
Represents an update to a `Job`. Fields that are set will be updated.
"""
input JobPatch {
  id: UUID
  description: String
  minutesToComplete: Float
  createdAt: Datetime
  price: Float
}

"""
A connection to a list of `Job` values.
"""
type JobsConnection {
  """
  A list of `Job` objects.
  """
  nodes: [Job!]!

  """
  A list of edges which contains the `Job` and cursor to aid in pagination.
  """
  edges: [JobsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Job` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Job` edge in the connection.
"""
type JobsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Job` at the end of the edge.
  """
  node: Job!
}

"""
Methods to use when ordering `Job`.
"""
enum JobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LogClientError {
  id: Int!
  ts: Datetime
  context: JSON!
  error: JSON!
}

"""
A condition to be used against `LogClientError` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LogClientErrorCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
A filter to be used against `LogClientError` object types. All fields are combined with a logical ‘and.’
"""
input LogClientErrorFilter {
  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Checks for all expressions in this list.
  """
  and: [LogClientErrorFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [LogClientErrorFilter!]

  """
  Negates the expression.
  """
  not: LogClientErrorFilter
}

"""
An input for mutations affecting `LogClientError`
"""
input LogClientErrorInput {
  id: Int
  ts: Datetime
  context: JSON!
  error: JSON!
}

"""
Represents an update to a `LogClientError`. Fields that are set will be updated.
"""
input LogClientErrorPatch {
  id: Int
  ts: Datetime
  context: JSON
  error: JSON
}

"""
A connection to a list of `LogClientError` values.
"""
type LogClientErrorsConnection {
  """
  A list of `LogClientError` objects.
  """
  nodes: [LogClientError!]!

  """
  A list of edges which contains the `LogClientError` and cursor to aid in pagination.
  """
  edges: [LogClientErrorsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LogClientError` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LogClientError` edge in the connection.
"""
type LogClientErrorsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LogClientError` at the end of the edge.
  """
  node: LogClientError!
}

"""
Methods to use when ordering `LogClientError`.
"""
enum LogClientErrorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
All input for the `makeBooking` mutation.
"""
input MakeBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mechanicId: UUID!
  timeSlotId: String!
  jobIds: [UUID]!
  longitude: Float!
  latitude: Float!
}

"""
The output of our `makeBooking` mutation.
"""
type MakeBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `Booking`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `Booking`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `Booking`. May be used by Relay 1.
  """
  bookingEdge(
    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

type Mechanic {
  id: UUID!
  fullName: String!
  nodeId: string
  rating: Float
  createdAt: Datetime
  geohashes: [String]!
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String

  """
  Reads and enables pagination through a set of `MechanicJob`.
  """
  mechanicJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MechanicJobFilter
  ): MechanicJobsConnection!

  mechanicJobsByMechanicId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MechanicJobFilter
  ): MechanicJobsConnection!

  """
  Reads and enables pagination through a set of `WorkingTime`.
  """
  workingTimes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorkingTimeFilter
  ): WorkingTimesConnection!

  """
  Reads and enables pagination through a set of `Booking`.
  """
  bookings(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingFilter
  ): BookingsConnection!

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90Days(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `VMechanicTimeSlotsNext90Day`.
    """
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]
  ): VMechanicTimeSlotsNext90DaysConnection!
}

"""
A condition to be used against `Mechanic` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MechanicCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID
}

"""
A filter to be used against `Mechanic` object types. All fields are combined with a logical ‘and.’
"""
input MechanicFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Checks for all expressions in this list.
  """
  and: [MechanicFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [MechanicFilter!]

  """
  Negates the expression.
  """
  not: MechanicFilter
}

"""
An input for mutations affecting `Mechanic`
"""
input MechanicInput {
  id: UUID
  fullName: String!
  rating: Float
  createdAt: Datetime
  geohashes: [String]
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String
}

type MechanicJob {
  id: UUID!
  mechanicId: UUID
  jobId: UUID

  """
  Reads a single `Mechanic` that is related to this `MechanicJob`.
  """
  mechanic: Mechanic

  """
  Reads a single `Job` that is related to this `MechanicJob`.
  """
  job: Job
}

"""
A condition to be used against `MechanicJob` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MechanicJobCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `mechanicId` field.
  """
  mechanicId: UUID

  """
  Checks for equality with the object’s `jobId` field.
  """
  jobId: UUID
}

"""
A filter to be used against `MechanicJob` object types. All fields are combined with a logical ‘and.’
"""
input MechanicJobFilter {
  """
  Filter by the object’s `id` field.
  """
  id: UUIDFilter

  """
  Filter by the object’s `mechanicId` field.
  """
  mechanicId: UUIDFilter

  """
  Filter by the object’s `jobId` field.
  """
  jobId: UUIDFilter

  """
  Checks for all expressions in this list.
  """
  and: [MechanicJobFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [MechanicJobFilter!]

  """
  Negates the expression.
  """
  not: MechanicJobFilter
}

"""
An input for mutations affecting `MechanicJob`
"""
input MechanicJobInput {
  id: UUID
  mechanicId: UUID
  jobId: UUID
}

"""
Represents an update to a `MechanicJob`. Fields that are set will be updated.
"""
input MechanicJobPatch {
  id: UUID
  mechanicId: UUID
  jobId: UUID
}

"""
A connection to a list of `MechanicJob` values.
"""
type MechanicJobsConnection {
  """
  A list of `MechanicJob` objects.
  """
  nodes: [MechanicJob!]!

  """
  A list of edges which contains the `MechanicJob` and cursor to aid in pagination.
  """
  edges: [MechanicJobsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `MechanicJob` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `MechanicJob` edge in the connection.
"""
type MechanicJobsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `MechanicJob` at the end of the edge.
  """
  node: MechanicJob!
}

"""
Methods to use when ordering `MechanicJob`.
"""
enum MechanicJobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  JOB_ID_ASC
  JOB_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Mechanic`. Fields that are set will be updated.
"""
input MechanicPatch {
  id: UUID
  fullName: String
  rating: Float
  createdAt: Datetime
  geohashes: [String]
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String
}

"""
A connection to a list of `Mechanic` values.
"""
type MechanicsConnection {
  """
  A list of `Mechanic` objects.
  """
  nodes: [Mechanic!]!

  """
  A list of edges which contains the `Mechanic` and cursor to aid in pagination.
  """
  edges: [MechanicsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Mechanic` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Mechanic` edge in the connection.
"""
type MechanicsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Mechanic` at the end of the edge.
  """
  node: Mechanic!
}

"""
Methods to use when ordering `Mechanic`.
"""
enum MechanicsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Booking`.
  """
  createBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookingInput!
  ): CreateBookingPayload

  """
  Creates a single `BookingJob`.
  """
  createBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookingJobInput!
  ): CreateBookingJobPayload

  """
  Creates a single `Calendar`.
  """
  createCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalendarInput!
  ): CreateCalendarPayload

  """
  Creates a single `ContactWhenGeohashAvailable`.
  """
  createContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContactWhenGeohashAvailableInput!
  ): CreateContactWhenGeohashAvailablePayload

  """
  Creates a single `FlywaySchemaHistory`.
  """
  createFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFlywaySchemaHistoryInput!
  ): CreateFlywaySchemaHistoryPayload

  """
  Creates a single `Job`.
  """
  createJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobInput!
  ): CreateJobPayload

  """
  Creates a single `LogClientError`.
  """
  createLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLogClientErrorInput!
  ): CreateLogClientErrorPayload

  """
  Creates a single `Mechanic`.
  """
  createMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMechanicInput!
  ): CreateMechanicPayload

  """
  Creates a single `MechanicJob`.
  """
  createMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMechanicJobInput!
  ): CreateMechanicJobPayload

  """
  Creates a single `TimeSlot`.
  """
  createTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTimeSlotInput!
  ): CreateTimeSlotPayload

  """
  Creates a single `WorkingTime`.
  """
  createWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWorkingTimeInput!
  ): CreateWorkingTimePayload

  """
  Updates a single `Booking` using a unique key and a patch.
  """
  updateBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload

  """
  Updates a single `BookingJob` using a unique key and a patch.
  """
  updateBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingJobInput!
  ): UpdateBookingJobPayload

  """
  Updates a single `Calendar` using a unique key and a patch.
  """
  updateCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalendarInput!
  ): UpdateCalendarPayload

  """
  Updates a single `ContactWhenGeohashAvailable` using a unique key and a patch.
  """
  updateContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactWhenGeohashAvailableInput!
  ): UpdateContactWhenGeohashAvailablePayload

  """
  Updates a single `FlywaySchemaHistory` using a unique key and a patch.
  """
  updateFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryInput!
  ): UpdateFlywaySchemaHistoryPayload

  """
  Updates a single `Job` using a unique key and a patch.
  """
  updateJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobInput!
  ): UpdateJobPayload

  """
  Updates a single `LogClientError` using a unique key and a patch.
  """
  updateLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogClientErrorInput!
  ): UpdateLogClientErrorPayload

  """
  Updates a single `Mechanic` using a unique key and a patch.
  """
  updateMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicInput!
  ): UpdateMechanicPayload

  """
  Updates a single `MechanicJob` using a unique key and a patch.
  """
  updateMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicJobInput!
  ): UpdateMechanicJobPayload

  """
  Updates a single `TimeSlot` using a unique key and a patch.
  """
  updateTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTimeSlotInput!
  ): UpdateTimeSlotPayload

  """
  Updates a single `WorkingTime` using a unique key and a patch.
  """
  updateWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkingTimeInput!
  ): UpdateWorkingTimePayload

  """
  Deletes a single `Booking` using a unique key.
  """
  deleteBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingInput!
  ): DeleteBookingPayload

  """
  Deletes a single `BookingJob` using a unique key.
  """
  deleteBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingJobInput!
  ): DeleteBookingJobPayload

  """
  Deletes a single `Calendar` using a unique key.
  """
  deleteCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalendarInput!
  ): DeleteCalendarPayload

  """
  Deletes a single `ContactWhenGeohashAvailable` using a unique key.
  """
  deleteContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactWhenGeohashAvailableInput!
  ): DeleteContactWhenGeohashAvailablePayload

  """
  Deletes a single `FlywaySchemaHistory` using a unique key.
  """
  deleteFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryInput!
  ): DeleteFlywaySchemaHistoryPayload

  """
  Deletes a single `Job` using a unique key.
  """
  deleteJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """
  Deletes a single `LogClientError` using a unique key.
  """
  deleteLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogClientErrorInput!
  ): DeleteLogClientErrorPayload

  """
  Deletes a single `Mechanic` using a unique key.
  """
  deleteMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicInput!
  ): DeleteMechanicPayload

  """
  Deletes a single `MechanicJob` using a unique key.
  """
  deleteMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicJobInput!
  ): DeleteMechanicJobPayload

  """
  Deletes a single `TimeSlot` using a unique key.
  """
  deleteTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTimeSlotInput!
  ): DeleteTimeSlotPayload

  """
  Deletes a single `WorkingTime` using a unique key.
  """
  deleteWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkingTimeInput!
  ): DeleteWorkingTimePayload
  makeBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeBookingInput!
  ): MakeBookingPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
The root query type which gives access points into the data universe.
"""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  Reads and enables pagination through a set of `Booking`.
  """
  bookings(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingFilter
  ): BookingsConnection

  """
  Reads and enables pagination through a set of `BookingJob`.
  """
  bookingJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingJobFilter
  ): BookingJobsConnection

  """
  Reads and enables pagination through a set of `Calendar`.
  """
  calendars(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Calendar`.
    """
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalendarCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CalendarFilter
  ): CalendarsConnection

  """
  Reads and enables pagination through a set of `ContactWhenGeohashAvailable`.
  """
  contactWhenGeohashAvailables(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ContactWhenGeohashAvailable`.
    """
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactWhenGeohashAvailableCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactWhenGeohashAvailableFilter
  ): ContactWhenGeohashAvailablesConnection

  """
  Reads and enables pagination through a set of `FlywaySchemaHistory`.
  """
  flywaySchemaHistories(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FlywaySchemaHistory`.
    """
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FlywaySchemaHistoryFilter
  ): FlywaySchemaHistoriesConnection

  """
  Reads and enables pagination through a set of `Job`.
  """
  jobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Job`.
    """
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter
  ): JobsConnection

  """
  Reads and enables pagination through a set of `AllJob`.
  """
  allJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Job`.
    """
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter
  ): JobsConnection

  """
  Reads and enables pagination through a set of `LogClientError`.
  """
  logClientErrors(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `LogClientError`.
    """
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogClientErrorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogClientErrorFilter
  ): LogClientErrorsConnection

  """
  Reads and enables pagination through a set of `Mechanic`.
  """
  mechanics(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Mechanic`.
    """
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MechanicFilter
  ): MechanicsConnection

  """
  Reads and enables pagination through a set of `MechanicJob`.
  """
  mechanicJobs(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MechanicJobFilter
  ): MechanicJobsConnection

  """
  Reads and enables pagination through a set of `TimeSlot`.
  """
  timeSlots(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TimeSlot`.
    """
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TimeSlotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TimeSlotFilter
  ): TimeSlotsConnection

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90Days(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `VMechanicTimeSlotsNext90Day`.
    """
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]
  ): VMechanicTimeSlotsNext90DaysConnection

  """
  Reads and enables pagination through a set of `WorkingTime`.
  """
  workingTimes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorkingTimeFilter
  ): WorkingTimesConnection
  booking(id: UUID!): Booking
  bookingJob(id: UUID!): BookingJob
  calendar(dateDimId: Int!): Calendar
  contactWhenGeohashAvailable(id: UUID!): ContactWhenGeohashAvailable
  flywaySchemaHistory(installedRank: Int!): FlywaySchemaHistory
  job(id: UUID!): Job
  logClientError(id: Int!): LogClientError
  mechanic(id: UUID!): Mechanic
  mechanicJob(id: UUID!): MechanicJob
  timeSlot(id: String!): TimeSlot
  vMechanicTimeSlotsNext90Day(
    mechanicId: UUID!
    timeSlotId: String!
  ): VMechanicTimeSlotsNext90Day
  workingTime(mechanicId: UUID!, timeSlotId: String!): WorkingTime

  """
  Reads and enables pagination through a set of `AvailableMechanic`.
  """
  getAvailableMechanics(
    fromTime: Datetime
    toTime: Datetime
    geohash: String
    jobIds: [UUID]

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): AvailableMechanicsConnection!
  getTimeLeft(mechanicId: UUID, timeSlotId: String): Int
  getTotalTimeAssignment(mechanicId: UUID, jobIds: [UUID]): Int
  isGeohashAvailable(geohash: String): Boolean
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: String

  """
  Not equal to the specified value.
  """
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: String

  """
  Included in the specified list.
  """
  in: [String!]

  """
  Not included in the specified list.
  """
  notIn: [String!]

  """
  Less than the specified value.
  """
  lessThan: String

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: String

  """
  Greater than the specified value.
  """
  greaterThan: String

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: String

  """
  Contains the specified string (case-sensitive).
  """
  includes: String

  """
  Does not contain the specified string (case-sensitive).
  """
  notIncludes: String

  """
  Contains the specified string (case-insensitive).
  """
  includesInsensitive: String

  """
  Does not contain the specified string (case-insensitive).
  """
  notIncludesInsensitive: String

  """
  Starts with the specified string (case-sensitive).
  """
  startsWith: String

  """
  Does not start with the specified string (case-sensitive).
  """
  notStartsWith: String

  """
  Starts with the specified string (case-insensitive).
  """
  startsWithInsensitive: String

  """
  Does not start with the specified string (case-insensitive).
  """
  notStartsWithInsensitive: String

  """
  Ends with the specified string (case-sensitive).
  """
  endsWith: String

  """
  Does not end with the specified string (case-sensitive).
  """
  notEndsWith: String

  """
  Ends with the specified string (case-insensitive).
  """
  endsWithInsensitive: String

  """
  Does not end with the specified string (case-insensitive).
  """
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

type TimeSlot {
  """
  E.g. 2019-12-31__09
  """
  id: String!
  startTime: Datetime!

  """
  Reads and enables pagination through a set of `WorkingTime`.
  """
  workingTimes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorkingTimeFilter
  ): WorkingTimesConnection!

  """
  Reads and enables pagination through a set of `Booking`.
  """
  bookings(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BookingFilter
  ): BookingsConnection!

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90Days(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `VMechanicTimeSlotsNext90Day`.
    """
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]
  ): VMechanicTimeSlotsNext90DaysConnection!
}

"""
A condition to be used against `TimeSlot` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TimeSlotCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: String

  """
  Checks for equality with the object’s `startTime` field.
  """
  startTime: Datetime
}

"""
A filter to be used against `TimeSlot` object types. All fields are combined with a logical ‘and.’
"""
input TimeSlotFilter {
  """
  Filter by the object’s `id` field.
  """
  id: StringFilter

  """
  Filter by the object’s `startTime` field.
  """
  startTime: DatetimeFilter

  """
  Checks for all expressions in this list.
  """
  and: [TimeSlotFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [TimeSlotFilter!]

  """
  Negates the expression.
  """
  not: TimeSlotFilter
}

"""
An input for mutations affecting `TimeSlot`
"""
input TimeSlotInput {
  """
  E.g. 2019-12-31__09
  """
  id: String!
  startTime: Datetime!
}

"""
Represents an update to a `TimeSlot`. Fields that are set will be updated.
"""
input TimeSlotPatch {
  """
  E.g. 2019-12-31__09
  """
  id: String
  startTime: Datetime
}

"""
A connection to a list of `TimeSlot` values.
"""
type TimeSlotsConnection {
  """
  A list of `TimeSlot` objects.
  """
  nodes: [TimeSlot!]!

  """
  A list of edges which contains the `TimeSlot` and cursor to aid in pagination.
  """
  edges: [TimeSlotsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TimeSlot` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `TimeSlot` edge in the connection.
"""
type TimeSlotsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TimeSlot` at the end of the edge.
  """
  node: TimeSlot!
}

"""
Methods to use when ordering `TimeSlot`.
"""
enum TimeSlotsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
All input for the `updateBooking` mutation.
"""
input UpdateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Booking` being updated.
  """
  patch: BookingPatch!
  id: UUID!
}

"""
All input for the `updateBookingJob` mutation.
"""
input UpdateBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BookingJob` being updated.
  """
  patch: BookingJobPatch!
  id: UUID!
}

"""
The output of our update `BookingJob` mutation.
"""
type UpdateBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `BookingJob` that was updated by this mutation.
  """
  bookingJob: BookingJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Booking` that is related to this `BookingJob`.
  """
  booking: Booking

  """
  Reads a single `Job` that is related to this `BookingJob`.
  """
  job: Job

  """
  An edge for our `BookingJob`. May be used by Relay 1.
  """
  bookingJobEdge(
    """
    The method to use when ordering `BookingJob`.
    """
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""
The output of our update `Booking` mutation.
"""
type UpdateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Booking` that was updated by this mutation.
  """
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `Booking`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `Booking`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `Booking`. May be used by Relay 1.
  """
  bookingEdge(
    """
    The method to use when ordering `Booking`.
    """
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""
All input for the `updateCalendar` mutation.
"""
input UpdateCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Calendar` being updated.
  """
  patch: CalendarPatch!
  dateDimId: Int!
}

"""
The output of our update `Calendar` mutation.
"""
type UpdateCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Calendar` that was updated by this mutation.
  """
  calendar: Calendar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Calendar`. May be used by Relay 1.
  """
  calendarEdge(
    """
    The method to use when ordering `Calendar`.
    """
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""
All input for the `updateContactWhenGeohashAvailable` mutation.
"""
input UpdateContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContactWhenGeohashAvailable` being updated.
  """
  patch: ContactWhenGeohashAvailablePatch!
  id: UUID!
}

"""
The output of our update `ContactWhenGeohashAvailable` mutation.
"""
type UpdateContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ContactWhenGeohashAvailable` that was updated by this mutation.
  """
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1.
  """
  contactWhenGeohashAvailableEdge(
    """
    The method to use when ordering `ContactWhenGeohashAvailable`.
    """
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""
All input for the `updateFlywaySchemaHistory` mutation.
"""
input UpdateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  patch: FlywaySchemaHistoryPatch!
  installedRank: Int!
}

"""
The output of our update `FlywaySchemaHistory` mutation.
"""
type UpdateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FlywaySchemaHistory` that was updated by this mutation.
  """
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FlywaySchemaHistory`. May be used by Relay 1.
  """
  flywaySchemaHistoryEdge(
    """
    The method to use when ordering `FlywaySchemaHistory`.
    """
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""
All input for the `updateJob` mutation.
"""
input UpdateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  patch: JobPatch!
  id: UUID!
}

"""
The output of our update `Job` mutation.
"""
type UpdateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Job` that was updated by this mutation.
  """
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Job`. May be used by Relay 1.
  """
  jobEdge(
    """
    The method to use when ordering `Job`.
    """
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""
All input for the `updateLogClientError` mutation.
"""
input UpdateLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LogClientError` being updated.
  """
  patch: LogClientErrorPatch!
  id: Int!
}

"""
The output of our update `LogClientError` mutation.
"""
type UpdateLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `LogClientError` that was updated by this mutation.
  """
  logClientError: LogClientError

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `LogClientError`. May be used by Relay 1.
  """
  logClientErrorEdge(
    """
    The method to use when ordering `LogClientError`.
    """
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""
All input for the `updateMechanic` mutation.
"""
input UpdateMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mechanic` being updated.
  """
  patch: MechanicPatch!
  id: UUID!
}

"""
All input for the `updateMechanicJob` mutation.
"""
input UpdateMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MechanicJob` being updated.
  """
  patch: MechanicJobPatch!
  id: UUID!
}

"""
The output of our update `MechanicJob` mutation.
"""
type UpdateMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MechanicJob` that was updated by this mutation.
  """
  mechanicJob: MechanicJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `MechanicJob`.
  """
  mechanic: Mechanic

  """
  Reads a single `Job` that is related to this `MechanicJob`.
  """
  job: Job

  """
  An edge for our `MechanicJob`. May be used by Relay 1.
  """
  mechanicJobEdge(
    """
    The method to use when ordering `MechanicJob`.
    """
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""
The output of our update `Mechanic` mutation.
"""
type UpdateMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Mechanic` that was updated by this mutation.
  """
  mechanic: Mechanic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Mechanic`. May be used by Relay 1.
  """
  mechanicEdge(
    """
    The method to use when ordering `Mechanic`.
    """
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""
All input for the `updateTimeSlot` mutation.
"""
input UpdateTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TimeSlot` being updated.
  """
  patch: TimeSlotPatch!

  """
  E.g. 2019-12-31__09
  """
  id: String!
}

"""
The output of our update `TimeSlot` mutation.
"""
type UpdateTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TimeSlot` that was updated by this mutation.
  """
  timeSlot: TimeSlot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TimeSlot`. May be used by Relay 1.
  """
  timeSlotEdge(
    """
    The method to use when ordering `TimeSlot`.
    """
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""
All input for the `updateWorkingTime` mutation.
"""
input UpdateWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WorkingTime` being updated.
  """
  patch: WorkingTimePatch!
  mechanicId: UUID!
  timeSlotId: String!
}

"""
The output of our update `WorkingTime` mutation.
"""
type UpdateWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `WorkingTime` that was updated by this mutation.
  """
  workingTime: WorkingTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Mechanic` that is related to this `WorkingTime`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `WorkingTime`.
  """
  timeSlot: TimeSlot

  """
  An edge for our `WorkingTime`. May be used by Relay 1.
  """
  workingTimeEdge(
    """
    The method to use when ordering `WorkingTime`.
    """
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: UUID

  """
  Not equal to the specified value.
  """
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: UUID

  """
  Included in the specified list.
  """
  in: [UUID!]

  """
  Not included in the specified list.
  """
  notIn: [UUID!]

  """
  Less than the specified value.
  """
  lessThan: UUID

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: UUID

  """
  Greater than the specified value.
  """
  greaterThan: UUID

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: UUID
}

type VMechanicTimeSlotsNext90Day {
  id: String
  mechanicId: UUID!
  workingTimeId: UUID
  timeSlotId: String!
  startTime: Datetime
  isoWeek: String
  workingTimeMinutes: Int
  timeBooked: BigInt

  """
  Reads a single `Mechanic` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  timeSlot: TimeSlot

  """
  Reads a single `WorkingTime` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  workingTime: WorkingTime
}

"""
A connection to a list of `VMechanicTimeSlotsNext90Day` values.
"""
type VMechanicTimeSlotsNext90DaysConnection {
  """
  A list of `VMechanicTimeSlotsNext90Day` objects.
  """
  nodes: [VMechanicTimeSlotsNext90Day!]!

  """
  A list of edges which contains the `VMechanicTimeSlotsNext90Day` and cursor to aid in pagination.
  """
  edges: [VMechanicTimeSlotsNext90DaysEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `VMechanicTimeSlotsNext90Day` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `VMechanicTimeSlotsNext90Day` edge in the connection.
"""
type VMechanicTimeSlotsNext90DaysEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `VMechanicTimeSlotsNext90Day` at the end of the edge.
  """
  node: VMechanicTimeSlotsNext90Day!
}

"""
Methods to use when ordering `VMechanicTimeSlotsNext90Day`.
"""
enum VMechanicTimeSlotsNext90DaysOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type WorkingTime {
  id: UUID!
  mechanicId: UUID!
  timeSlotId: String!
  minutes: Int

  """
  Reads a single `Mechanic` that is related to this `WorkingTime`.
  """
  mechanic: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `WorkingTime`.
  """
  timeSlot: TimeSlot

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90Days(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `VMechanicTimeSlotsNext90Day`.
    """
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]
  ): VMechanicTimeSlotsNext90DaysConnection!
}

"""
A condition to be used against `WorkingTime` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkingTimeCondition {
  """
  Checks for equality with the object’s `mechanicId` field.
  """
  mechanicId: UUID

  """
  Checks for equality with the object’s `timeSlotId` field.
  """
  timeSlotId: String
}

"""
A filter to be used against `WorkingTime` object types. All fields are combined with a logical ‘and.’
"""
input WorkingTimeFilter {
  """
  Filter by the object’s `mechanicId` field.
  """
  mechanicId: UUIDFilter

  """
  Filter by the object’s `timeSlotId` field.
  """
  timeSlotId: StringFilter

  """
  Checks for all expressions in this list.
  """
  and: [WorkingTimeFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [WorkingTimeFilter!]

  """
  Negates the expression.
  """
  not: WorkingTimeFilter
}

"""
An input for mutations affecting `WorkingTime`
"""
input WorkingTimeInput {
  id: UUID
  mechanicId: UUID!
  timeSlotId: String!
  minutes: Int
}

"""
Represents an update to a `WorkingTime`. Fields that are set will be updated.
"""
input WorkingTimePatch {
  id: UUID
  mechanicId: UUID
  timeSlotId: String
  minutes: Int
}

"""
A connection to a list of `WorkingTime` values.
"""
type WorkingTimesConnection {
  """
  A list of `WorkingTime` objects.
  """
  nodes: [WorkingTime!]!

  """
  A list of edges which contains the `WorkingTime` and cursor to aid in pagination.
  """
  edges: [WorkingTimesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `WorkingTime` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `WorkingTime` edge in the connection.
"""
type WorkingTimesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `WorkingTime` at the end of the edge.
  """
  node: WorkingTime!
}

"""
Methods to use when ordering `WorkingTime`.
"""
enum WorkingTimesOrderBy {
  NATURAL
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  TIME_SLOT_ID_ASC
  TIME_SLOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
