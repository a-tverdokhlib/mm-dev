"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Booking`."""
  allBookings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection

  """Reads and enables pagination through a set of `BookingJob`."""
  allBookingJobs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition
  ): BookingJobsConnection

  """Reads and enables pagination through a set of `Calendar`."""
  allCalendars(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Calendar`."""
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalendarCondition
  ): CalendarsConnection

  """
  Reads and enables pagination through a set of `ContactWhenGeohashAvailable`.
  """
  allContactWhenGeohashAvailables(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContactWhenGeohashAvailable`."""
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactWhenGeohashAvailableCondition
  ): ContactWhenGeohashAvailablesConnection

  """Reads and enables pagination through a set of `FlywaySchemaHistory`."""
  allFlywaySchemaHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition
  ): FlywaySchemaHistoriesConnection

  """Reads and enables pagination through a set of `Job`."""
  allJobs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition
  ): JobsConnection

  """Reads and enables pagination through a set of `LogClientError`."""
  allLogClientErrors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LogClientError`."""
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogClientErrorCondition
  ): LogClientErrorsConnection

  """Reads and enables pagination through a set of `Mechanic`."""
  allMechanics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Mechanic`."""
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicCondition
  ): MechanicsConnection

  """Reads and enables pagination through a set of `MechanicJob`."""
  allMechanicJobs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition
  ): MechanicJobsConnection

  """Reads and enables pagination through a set of `TimeSlot`."""
  allTimeSlots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TimeSlot`."""
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TimeSlotCondition
  ): TimeSlotsConnection

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  allVMechanicTimeSlotsNext90Days(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VMechanicTimeSlotsNext90Day`."""
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VMechanicTimeSlotsNext90DayCondition
  ): VMechanicTimeSlotsNext90DaysConnection

  """Reads and enables pagination through a set of `WorkingTime`."""
  allWorkingTimes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition
  ): WorkingTimesConnection
  bookingById(id: UUID!): Booking
  bookingJobById(id: UUID!): BookingJob
  calendarByDateDimId(dateDimId: Int!): Calendar
  contactWhenGeohashAvailableById(id: UUID!): ContactWhenGeohashAvailable
  flywaySchemaHistoryByInstalledRank(installedRank: Int!): FlywaySchemaHistory
  jobById(id: UUID!): Job
  logClientErrorById(id: Int!): LogClientError
  mechanicById(id: UUID!): Mechanic
  mechanicJobById(id: UUID!): MechanicJob
  timeSlotById(id: String!): TimeSlot
  vMechanicTimeSlotsNext90DayByMechanicIdAndTimeSlotId(mechanicId: UUID!, timeSlotId: String!): VMechanicTimeSlotsNext90Day
  workingTimeByMechanicIdAndTimeSlotId(mechanicId: UUID!, timeSlotId: String!): WorkingTime

  """Reads and enables pagination through a set of `AvailableMechanic`."""
  getAvailableMechanics(
    fromTime: Datetime
    toTime: Datetime
    geohash: String
    jobIds: [UUID]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): AvailableMechanicsConnection
  getTimeLeft(mechanicId: UUID, timeSlotId: String): Int
  getTotalTimeAssignment(mechanicId: UUID, jobIds: [UUID]): Int
  isGeohashAvailable(geohash: String): Boolean

  """Reads a single `Booking` using its globally unique `ID`."""
  booking(
    """The globally unique `ID` to be used in selecting a single `Booking`."""
    nodeId: ID!
  ): Booking

  """Reads a single `BookingJob` using its globally unique `ID`."""
  bookingJob(
    """
    The globally unique `ID` to be used in selecting a single `BookingJob`.
    """
    nodeId: ID!
  ): BookingJob

  """Reads a single `Calendar` using its globally unique `ID`."""
  calendar(
    """The globally unique `ID` to be used in selecting a single `Calendar`."""
    nodeId: ID!
  ): Calendar

  """
  Reads a single `ContactWhenGeohashAvailable` using its globally unique `ID`.
  """
  contactWhenGeohashAvailable(
    """
    The globally unique `ID` to be used in selecting a single `ContactWhenGeohashAvailable`.
    """
    nodeId: ID!
  ): ContactWhenGeohashAvailable

  """Reads a single `FlywaySchemaHistory` using its globally unique `ID`."""
  flywaySchemaHistory(
    """
    The globally unique `ID` to be used in selecting a single `FlywaySchemaHistory`.
    """
    nodeId: ID!
  ): FlywaySchemaHistory

  """Reads a single `Job` using its globally unique `ID`."""
  job(
    """The globally unique `ID` to be used in selecting a single `Job`."""
    nodeId: ID!
  ): Job

  """Reads a single `LogClientError` using its globally unique `ID`."""
  logClientError(
    """
    The globally unique `ID` to be used in selecting a single `LogClientError`.
    """
    nodeId: ID!
  ): LogClientError

  """Reads a single `Mechanic` using its globally unique `ID`."""
  mechanic(
    """The globally unique `ID` to be used in selecting a single `Mechanic`."""
    nodeId: ID!
  ): Mechanic

  """Reads a single `MechanicJob` using its globally unique `ID`."""
  mechanicJob(
    """
    The globally unique `ID` to be used in selecting a single `MechanicJob`.
    """
    nodeId: ID!
  ): MechanicJob

  """Reads a single `TimeSlot` using its globally unique `ID`."""
  timeSlot(
    """The globally unique `ID` to be used in selecting a single `TimeSlot`."""
    nodeId: ID!
  ): TimeSlot

  """
  Reads a single `VMechanicTimeSlotsNext90Day` using its globally unique `ID`.
  """
  vMechanicTimeSlotsNext90Day(
    """
    The globally unique `ID` to be used in selecting a single `VMechanicTimeSlotsNext90Day`.
    """
    nodeId: ID!
  ): VMechanicTimeSlotsNext90Day

  """Reads a single `WorkingTime` using its globally unique `ID`."""
  workingTime(
    """
    The globally unique `ID` to be used in selecting a single `WorkingTime`.
    """
    nodeId: ID!
  ): WorkingTime
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Booking` values."""
type BookingsConnection {
  """A list of `Booking` objects."""
  nodes: [Booking]!

  """
  A list of edges which contains the `Booking` and cursor to aid in pagination.
  """
  edges: [BookingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Booking` you could get from the connection."""
  totalCount: Int!
}

type Booking implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  mechanicId: UUID
  timeSlotId: String!
  status: BookingStatus!
  longitude: Float!
  latitude: Float!
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime!
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int!

  """Reads a single `Mechanic` that is related to this `Booking`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `Booking`."""
  timeSlotByTimeSlotId: TimeSlot

  """Reads and enables pagination through a set of `BookingJob`."""
  bookingJobsByBookingId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition
  ): BookingJobsConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

enum BookingStatus {
  RESERVED
  CONFIRMED
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Mechanic implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  fullName: String!
  rating: Float
  createdAt: Datetime
  geohashes: [String]!
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String

  """Reads and enables pagination through a set of `MechanicJob`."""
  mechanicJobsByMechanicId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition
  ): MechanicJobsConnection!

  """Reads and enables pagination through a set of `WorkingTime`."""
  workingTimesByMechanicId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition
  ): WorkingTimesConnection!

  """Reads and enables pagination through a set of `Booking`."""
  bookingsByMechanicId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection!

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90DaysByMechanicId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VMechanicTimeSlotsNext90Day`."""
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VMechanicTimeSlotsNext90DayCondition
  ): VMechanicTimeSlotsNext90DaysConnection!
}

"""A connection to a list of `MechanicJob` values."""
type MechanicJobsConnection {
  """A list of `MechanicJob` objects."""
  nodes: [MechanicJob]!

  """
  A list of edges which contains the `MechanicJob` and cursor to aid in pagination.
  """
  edges: [MechanicJobsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MechanicJob` you could get from the connection."""
  totalCount: Int!
}

type MechanicJob implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  mechanicId: UUID
  jobId: UUID

  """Reads a single `Mechanic` that is related to this `MechanicJob`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `Job` that is related to this `MechanicJob`."""
  jobByJobId: Job
}

type Job implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  description: String!
  minutesToComplete: Float!
  createdAt: Datetime
  price: Float!

  """Reads and enables pagination through a set of `MechanicJob`."""
  mechanicJobsByJobId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MechanicJobCondition
  ): MechanicJobsConnection!

  """Reads and enables pagination through a set of `BookingJob`."""
  bookingJobsByJobId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingJobCondition
  ): BookingJobsConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `MechanicJob`."""
enum MechanicJobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  JOB_ID_ASC
  JOB_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MechanicJob` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MechanicJobCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mechanicId` field."""
  mechanicId: UUID

  """Checks for equality with the object’s `jobId` field."""
  jobId: UUID
}

"""A connection to a list of `BookingJob` values."""
type BookingJobsConnection {
  """A list of `BookingJob` objects."""
  nodes: [BookingJob]!

  """
  A list of edges which contains the `BookingJob` and cursor to aid in pagination.
  """
  edges: [BookingJobsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BookingJob` you could get from the connection."""
  totalCount: Int!
}

type BookingJob implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  bookingId: UUID
  jobId: UUID

  """Reads a single `Booking` that is related to this `BookingJob`."""
  bookingByBookingId: Booking

  """Reads a single `Job` that is related to this `BookingJob`."""
  jobByJobId: Job
}

"""A `BookingJob` edge in the connection."""
type BookingJobsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BookingJob` at the end of the edge."""
  node: BookingJob
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `BookingJob`."""
enum BookingJobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BOOKING_ID_ASC
  BOOKING_ID_DESC
  JOB_ID_ASC
  JOB_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BookingJob` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BookingJobCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `bookingId` field."""
  bookingId: UUID

  """Checks for equality with the object’s `jobId` field."""
  jobId: UUID
}

"""A `MechanicJob` edge in the connection."""
type MechanicJobsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MechanicJob` at the end of the edge."""
  node: MechanicJob
}

"""A connection to a list of `WorkingTime` values."""
type WorkingTimesConnection {
  """A list of `WorkingTime` objects."""
  nodes: [WorkingTime]!

  """
  A list of edges which contains the `WorkingTime` and cursor to aid in pagination.
  """
  edges: [WorkingTimesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WorkingTime` you could get from the connection."""
  totalCount: Int!
}

type WorkingTime implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  mechanicId: UUID!
  timeSlotId: String!
  minutes: Int

  """Reads a single `Mechanic` that is related to this `WorkingTime`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `WorkingTime`."""
  timeSlotByTimeSlotId: TimeSlot

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90DaysByWorkingTimeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VMechanicTimeSlotsNext90Day`."""
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VMechanicTimeSlotsNext90DayCondition
  ): VMechanicTimeSlotsNext90DaysConnection!
}

type TimeSlot implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """E.g. 2019-12-31__09"""
  id: String!
  startTime: Datetime!

  """Reads and enables pagination through a set of `WorkingTime`."""
  workingTimesByTimeSlotId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkingTimeCondition
  ): WorkingTimesConnection!

  """Reads and enables pagination through a set of `Booking`."""
  bookingsByTimeSlotId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection!

  """
  Reads and enables pagination through a set of `VMechanicTimeSlotsNext90Day`.
  """
  vMechanicTimeSlotsNext90DaysByTimeSlotId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VMechanicTimeSlotsNext90Day`."""
    orderBy: [VMechanicTimeSlotsNext90DaysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VMechanicTimeSlotsNext90DayCondition
  ): VMechanicTimeSlotsNext90DaysConnection!
}

"""Methods to use when ordering `WorkingTime`."""
enum WorkingTimesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  TIME_SLOT_ID_ASC
  TIME_SLOT_ID_DESC
  MINUTES_ASC
  MINUTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorkingTime` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkingTimeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mechanicId` field."""
  mechanicId: UUID

  """Checks for equality with the object’s `timeSlotId` field."""
  timeSlotId: String

  """Checks for equality with the object’s `minutes` field."""
  minutes: Int
}

"""Methods to use when ordering `Booking`."""
enum BookingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  TIME_SLOT_ID_ASC
  TIME_SLOT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  JOB_COMPLETED_AT_ASC
  JOB_COMPLETED_AT_DESC
  PAID_AT_ASC
  PAID_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  JOB_STARTED_AT_ASC
  JOB_STARTED_AT_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PHONE_ASC
  PHONE_DESC
  EMAIL_ASC
  EMAIL_DESC
  CAR_REGISTRATION_NUMBER_ASC
  CAR_REGISTRATION_NUMBER_DESC
  DURATION_MINUTES_ASC
  DURATION_MINUTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Booking` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BookingCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mechanicId` field."""
  mechanicId: UUID

  """Checks for equality with the object’s `timeSlotId` field."""
  timeSlotId: String

  """Checks for equality with the object’s `status` field."""
  status: BookingStatus

  """Checks for equality with the object’s `longitude` field."""
  longitude: Float

  """Checks for equality with the object’s `latitude` field."""
  latitude: Float

  """Checks for equality with the object’s `jobCompletedAt` field."""
  jobCompletedAt: Datetime

  """Checks for equality with the object’s `paidAt` field."""
  paidAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `jobStartedAt` field."""
  jobStartedAt: Datetime

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `carRegistrationNumber` field."""
  carRegistrationNumber: String

  """Checks for equality with the object’s `durationMinutes` field."""
  durationMinutes: Int
}

"""A connection to a list of `VMechanicTimeSlotsNext90Day` values."""
type VMechanicTimeSlotsNext90DaysConnection {
  """A list of `VMechanicTimeSlotsNext90Day` objects."""
  nodes: [VMechanicTimeSlotsNext90Day]!

  """
  A list of edges which contains the `VMechanicTimeSlotsNext90Day` and cursor to aid in pagination.
  """
  edges: [VMechanicTimeSlotsNext90DaysEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `VMechanicTimeSlotsNext90Day` you could get from the connection.
  """
  totalCount: Int!
}

type VMechanicTimeSlotsNext90Day implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String
  mechanicId: UUID!
  workingTimeId: UUID
  timeSlotId: String!
  startTime: Datetime
  isoWeek: String
  workingTimeMinutes: Int
  timeBooked: BigInt

  """
  Reads a single `Mechanic` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  mechanicByMechanicId: Mechanic

  """
  Reads a single `TimeSlot` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  timeSlotByTimeSlotId: TimeSlot

  """
  Reads a single `WorkingTime` that is related to this `VMechanicTimeSlotsNext90Day`.
  """
  workingTimeByWorkingTimeId: WorkingTime
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `VMechanicTimeSlotsNext90Day` edge in the connection."""
type VMechanicTimeSlotsNext90DaysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VMechanicTimeSlotsNext90Day` at the end of the edge."""
  node: VMechanicTimeSlotsNext90Day
}

"""Methods to use when ordering `VMechanicTimeSlotsNext90Day`."""
enum VMechanicTimeSlotsNext90DaysOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MECHANIC_ID_ASC
  MECHANIC_ID_DESC
  WORKING_TIME_ID_ASC
  WORKING_TIME_ID_DESC
  TIME_SLOT_ID_ASC
  TIME_SLOT_ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  ISO_WEEK_ASC
  ISO_WEEK_DESC
  WORKING_TIME_MINUTES_ASC
  WORKING_TIME_MINUTES_DESC
  TIME_BOOKED_ASC
  TIME_BOOKED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `VMechanicTimeSlotsNext90Day` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input VMechanicTimeSlotsNext90DayCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `mechanicId` field."""
  mechanicId: UUID

  """Checks for equality with the object’s `workingTimeId` field."""
  workingTimeId: UUID

  """Checks for equality with the object’s `timeSlotId` field."""
  timeSlotId: String

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime

  """Checks for equality with the object’s `isoWeek` field."""
  isoWeek: String

  """Checks for equality with the object’s `workingTimeMinutes` field."""
  workingTimeMinutes: Int

  """Checks for equality with the object’s `timeBooked` field."""
  timeBooked: BigInt
}

"""A `WorkingTime` edge in the connection."""
type WorkingTimesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorkingTime` at the end of the edge."""
  node: WorkingTime
}

"""A `Booking` edge in the connection."""
type BookingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Booking` at the end of the edge."""
  node: Booking
}

"""A connection to a list of `Calendar` values."""
type CalendarsConnection {
  """A list of `Calendar` objects."""
  nodes: [Calendar]!

  """
  A list of edges which contains the `Calendar` and cursor to aid in pagination.
  """
  edges: [CalendarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Calendar` you could get from the connection."""
  totalCount: Int!
}

type Calendar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  dateDimId: Int!
  dateActual: Date!
  epoch: BigInt!
  daySuffix: String!
  dayName: String!
  dayOfWeek: Int!
  dayOfMonth: Int!
  dayOfQuarter: Int!
  dayOfYear: Int!
  weekOfMonth: Int!
  weekOfYear: Int!
  weekOfYearIso: String!
  monthActual: Int!
  monthName: String!
  monthNameAbbreviated: String!
  quarterActual: Int!
  quarterName: String!
  yearActual: Int!
  firstDayOfWeek: Date!
  lastDayOfWeek: Date!
  firstDayOfMonth: Date!
  lastDayOfMonth: Date!
  firstDayOfQuarter: Date!
  lastDayOfQuarter: Date!
  firstDayOfYear: Date!
  lastDayOfYear: Date!
  mmyyyy: String!
  mmddyyyy: String!
  weekendIndr: Boolean!
}

"""The day, does not include a time."""
scalar Date

"""A `Calendar` edge in the connection."""
type CalendarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Calendar` at the end of the edge."""
  node: Calendar
}

"""Methods to use when ordering `Calendar`."""
enum CalendarsOrderBy {
  NATURAL
  DATE_DIM_ID_ASC
  DATE_DIM_ID_DESC
  DATE_ACTUAL_ASC
  DATE_ACTUAL_DESC
  EPOCH_ASC
  EPOCH_DESC
  DAY_SUFFIX_ASC
  DAY_SUFFIX_DESC
  DAY_NAME_ASC
  DAY_NAME_DESC
  DAY_OF_WEEK_ASC
  DAY_OF_WEEK_DESC
  DAY_OF_MONTH_ASC
  DAY_OF_MONTH_DESC
  DAY_OF_QUARTER_ASC
  DAY_OF_QUARTER_DESC
  DAY_OF_YEAR_ASC
  DAY_OF_YEAR_DESC
  WEEK_OF_MONTH_ASC
  WEEK_OF_MONTH_DESC
  WEEK_OF_YEAR_ASC
  WEEK_OF_YEAR_DESC
  WEEK_OF_YEAR_ISO_ASC
  WEEK_OF_YEAR_ISO_DESC
  MONTH_ACTUAL_ASC
  MONTH_ACTUAL_DESC
  MONTH_NAME_ASC
  MONTH_NAME_DESC
  MONTH_NAME_ABBREVIATED_ASC
  MONTH_NAME_ABBREVIATED_DESC
  QUARTER_ACTUAL_ASC
  QUARTER_ACTUAL_DESC
  QUARTER_NAME_ASC
  QUARTER_NAME_DESC
  YEAR_ACTUAL_ASC
  YEAR_ACTUAL_DESC
  FIRST_DAY_OF_WEEK_ASC
  FIRST_DAY_OF_WEEK_DESC
  LAST_DAY_OF_WEEK_ASC
  LAST_DAY_OF_WEEK_DESC
  FIRST_DAY_OF_MONTH_ASC
  FIRST_DAY_OF_MONTH_DESC
  LAST_DAY_OF_MONTH_ASC
  LAST_DAY_OF_MONTH_DESC
  FIRST_DAY_OF_QUARTER_ASC
  FIRST_DAY_OF_QUARTER_DESC
  LAST_DAY_OF_QUARTER_ASC
  LAST_DAY_OF_QUARTER_DESC
  FIRST_DAY_OF_YEAR_ASC
  FIRST_DAY_OF_YEAR_DESC
  LAST_DAY_OF_YEAR_ASC
  LAST_DAY_OF_YEAR_DESC
  MMYYYY_ASC
  MMYYYY_DESC
  MMDDYYYY_ASC
  MMDDYYYY_DESC
  WEEKEND_INDR_ASC
  WEEKEND_INDR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Calendar` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CalendarCondition {
  """Checks for equality with the object’s `dateDimId` field."""
  dateDimId: Int

  """Checks for equality with the object’s `dateActual` field."""
  dateActual: Date

  """Checks for equality with the object’s `epoch` field."""
  epoch: BigInt

  """Checks for equality with the object’s `daySuffix` field."""
  daySuffix: String

  """Checks for equality with the object’s `dayName` field."""
  dayName: String

  """Checks for equality with the object’s `dayOfWeek` field."""
  dayOfWeek: Int

  """Checks for equality with the object’s `dayOfMonth` field."""
  dayOfMonth: Int

  """Checks for equality with the object’s `dayOfQuarter` field."""
  dayOfQuarter: Int

  """Checks for equality with the object’s `dayOfYear` field."""
  dayOfYear: Int

  """Checks for equality with the object’s `weekOfMonth` field."""
  weekOfMonth: Int

  """Checks for equality with the object’s `weekOfYear` field."""
  weekOfYear: Int

  """Checks for equality with the object’s `weekOfYearIso` field."""
  weekOfYearIso: String

  """Checks for equality with the object’s `monthActual` field."""
  monthActual: Int

  """Checks for equality with the object’s `monthName` field."""
  monthName: String

  """Checks for equality with the object’s `monthNameAbbreviated` field."""
  monthNameAbbreviated: String

  """Checks for equality with the object’s `quarterActual` field."""
  quarterActual: Int

  """Checks for equality with the object’s `quarterName` field."""
  quarterName: String

  """Checks for equality with the object’s `yearActual` field."""
  yearActual: Int

  """Checks for equality with the object’s `firstDayOfWeek` field."""
  firstDayOfWeek: Date

  """Checks for equality with the object’s `lastDayOfWeek` field."""
  lastDayOfWeek: Date

  """Checks for equality with the object’s `firstDayOfMonth` field."""
  firstDayOfMonth: Date

  """Checks for equality with the object’s `lastDayOfMonth` field."""
  lastDayOfMonth: Date

  """Checks for equality with the object’s `firstDayOfQuarter` field."""
  firstDayOfQuarter: Date

  """Checks for equality with the object’s `lastDayOfQuarter` field."""
  lastDayOfQuarter: Date

  """Checks for equality with the object’s `firstDayOfYear` field."""
  firstDayOfYear: Date

  """Checks for equality with the object’s `lastDayOfYear` field."""
  lastDayOfYear: Date

  """Checks for equality with the object’s `mmyyyy` field."""
  mmyyyy: String

  """Checks for equality with the object’s `mmddyyyy` field."""
  mmddyyyy: String

  """Checks for equality with the object’s `weekendIndr` field."""
  weekendIndr: Boolean
}

"""A connection to a list of `ContactWhenGeohashAvailable` values."""
type ContactWhenGeohashAvailablesConnection {
  """A list of `ContactWhenGeohashAvailable` objects."""
  nodes: [ContactWhenGeohashAvailable]!

  """
  A list of edges which contains the `ContactWhenGeohashAvailable` and cursor to aid in pagination.
  """
  edges: [ContactWhenGeohashAvailablesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContactWhenGeohashAvailable` you could get from the connection.
  """
  totalCount: Int!
}

type ContactWhenGeohashAvailable implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  geohash: String!
  email: String
  createdAt: Datetime
}

"""A `ContactWhenGeohashAvailable` edge in the connection."""
type ContactWhenGeohashAvailablesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContactWhenGeohashAvailable` at the end of the edge."""
  node: ContactWhenGeohashAvailable
}

"""Methods to use when ordering `ContactWhenGeohashAvailable`."""
enum ContactWhenGeohashAvailablesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GEOHASH_ASC
  GEOHASH_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ContactWhenGeohashAvailable` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ContactWhenGeohashAvailableCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `geohash` field."""
  geohash: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `FlywaySchemaHistory` values."""
type FlywaySchemaHistoriesConnection {
  """A list of `FlywaySchemaHistory` objects."""
  nodes: [FlywaySchemaHistory]!

  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

type FlywaySchemaHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime!
  executionTime: Int!
  success: Boolean!
}

"""A `FlywaySchemaHistory` edge in the connection."""
type FlywaySchemaHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FlywaySchemaHistory` at the end of the edge."""
  node: FlywaySchemaHistory
}

"""Methods to use when ordering `FlywaySchemaHistory`."""
enum FlywaySchemaHistoriesOrderBy {
  NATURAL
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  VERSION_ASC
  VERSION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  TYPE_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  INSTALLED_BY_ASC
  INSTALLED_BY_DESC
  INSTALLED_ON_ASC
  INSTALLED_ON_DESC
  EXECUTION_TIME_ASC
  EXECUTION_TIME_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """Checks for equality with the object’s `installedRank` field."""
  installedRank: Int

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `checksum` field."""
  checksum: Int

  """Checks for equality with the object’s `installedBy` field."""
  installedBy: String

  """Checks for equality with the object’s `installedOn` field."""
  installedOn: Datetime

  """Checks for equality with the object’s `executionTime` field."""
  executionTime: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean
}

"""A connection to a list of `Job` values."""
type JobsConnection {
  """A list of `Job` objects."""
  nodes: [Job]!

  """
  A list of edges which contains the `Job` and cursor to aid in pagination.
  """
  edges: [JobsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

"""A `Job` edge in the connection."""
type JobsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Job` at the end of the edge."""
  node: Job
}

"""Methods to use when ordering `Job`."""
enum JobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  MINUTES_TO_COMPLETE_ASC
  MINUTES_TO_COMPLETE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRICE_ASC
  PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Job` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input JobCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `minutesToComplete` field."""
  minutesToComplete: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `price` field."""
  price: Float
}

"""A connection to a list of `LogClientError` values."""
type LogClientErrorsConnection {
  """A list of `LogClientError` objects."""
  nodes: [LogClientError]!

  """
  A list of edges which contains the `LogClientError` and cursor to aid in pagination.
  """
  edges: [LogClientErrorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LogClientError` you could get from the connection."""
  totalCount: Int!
}

type LogClientError implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  ts: Datetime
  context: JSON!
  error: JSON!
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `LogClientError` edge in the connection."""
type LogClientErrorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LogClientError` at the end of the edge."""
  node: LogClientError
}

"""Methods to use when ordering `LogClientError`."""
enum LogClientErrorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TS_ASC
  TS_DESC
  CONTEXT_ASC
  CONTEXT_DESC
  ERROR_ASC
  ERROR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LogClientError` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LogClientErrorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `ts` field."""
  ts: Datetime

  """Checks for equality with the object’s `context` field."""
  context: JSON

  """Checks for equality with the object’s `error` field."""
  error: JSON
}

"""A connection to a list of `Mechanic` values."""
type MechanicsConnection {
  """A list of `Mechanic` objects."""
  nodes: [Mechanic]!

  """
  A list of edges which contains the `Mechanic` and cursor to aid in pagination.
  """
  edges: [MechanicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mechanic` you could get from the connection."""
  totalCount: Int!
}

"""A `Mechanic` edge in the connection."""
type MechanicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mechanic` at the end of the edge."""
  node: Mechanic
}

"""Methods to use when ordering `Mechanic`."""
enum MechanicsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FULL_NAME_ASC
  FULL_NAME_DESC
  RATING_ASC
  RATING_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  GEOHASHES_ASC
  GEOHASHES_DESC
  TRAVEL_TIME_MINUTES_ASC
  TRAVEL_TIME_MINUTES_DESC
  PICTURE_URL_ASC
  PICTURE_URL_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Mechanic` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MechanicCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `fullName` field."""
  fullName: String

  """Checks for equality with the object’s `rating` field."""
  rating: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `geohashes` field."""
  geohashes: [String]

  """Checks for equality with the object’s `travelTimeMinutes` field."""
  travelTimeMinutes: Int

  """Checks for equality with the object’s `pictureUrl` field."""
  pictureUrl: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `address` field."""
  address: String
}

"""A connection to a list of `TimeSlot` values."""
type TimeSlotsConnection {
  """A list of `TimeSlot` objects."""
  nodes: [TimeSlot]!

  """
  A list of edges which contains the `TimeSlot` and cursor to aid in pagination.
  """
  edges: [TimeSlotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TimeSlot` you could get from the connection."""
  totalCount: Int!
}

"""A `TimeSlot` edge in the connection."""
type TimeSlotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeSlot` at the end of the edge."""
  node: TimeSlot
}

"""Methods to use when ordering `TimeSlot`."""
enum TimeSlotsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TimeSlot` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TimeSlotCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime
}

"""A connection to a list of `AvailableMechanic` values."""
type AvailableMechanicsConnection {
  """A list of `AvailableMechanic` objects."""
  nodes: [AvailableMechanic]!

  """
  A list of edges which contains the `AvailableMechanic` and cursor to aid in pagination.
  """
  edges: [AvailableMechanicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AvailableMechanic` you could get from the connection.
  """
  totalCount: Int!
}

type AvailableMechanic {
  mechanicId: UUID
  timeSlotId: String
  startTime: Datetime
}

"""A `AvailableMechanic` edge in the connection."""
type AvailableMechanicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AvailableMechanic` at the end of the edge."""
  node: AvailableMechanic
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Booking`."""
  createBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookingInput!
  ): CreateBookingPayload

  """Creates a single `BookingJob`."""
  createBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookingJobInput!
  ): CreateBookingJobPayload

  """Creates a single `Calendar`."""
  createCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalendarInput!
  ): CreateCalendarPayload

  """Creates a single `ContactWhenGeohashAvailable`."""
  createContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContactWhenGeohashAvailableInput!
  ): CreateContactWhenGeohashAvailablePayload

  """Creates a single `FlywaySchemaHistory`."""
  createFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFlywaySchemaHistoryInput!
  ): CreateFlywaySchemaHistoryPayload

  """Creates a single `Job`."""
  createJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobInput!
  ): CreateJobPayload

  """Creates a single `LogClientError`."""
  createLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLogClientErrorInput!
  ): CreateLogClientErrorPayload

  """Creates a single `Mechanic`."""
  createMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMechanicInput!
  ): CreateMechanicPayload

  """Creates a single `MechanicJob`."""
  createMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMechanicJobInput!
  ): CreateMechanicJobPayload

  """Creates a single `TimeSlot`."""
  createTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTimeSlotInput!
  ): CreateTimeSlotPayload

  """Creates a single `WorkingTime`."""
  createWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWorkingTimeInput!
  ): CreateWorkingTimePayload

  """Updates a single `Booking` using its globally unique id and a patch."""
  updateBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload

  """Updates a single `Booking` using a unique key and a patch."""
  updateBookingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingByIdInput!
  ): UpdateBookingPayload

  """
  Updates a single `BookingJob` using its globally unique id and a patch.
  """
  updateBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingJobInput!
  ): UpdateBookingJobPayload

  """Updates a single `BookingJob` using a unique key and a patch."""
  updateBookingJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingJobByIdInput!
  ): UpdateBookingJobPayload

  """Updates a single `Calendar` using its globally unique id and a patch."""
  updateCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalendarInput!
  ): UpdateCalendarPayload

  """Updates a single `Calendar` using a unique key and a patch."""
  updateCalendarByDateDimId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalendarByDateDimIdInput!
  ): UpdateCalendarPayload

  """
  Updates a single `ContactWhenGeohashAvailable` using its globally unique id and a patch.
  """
  updateContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactWhenGeohashAvailableInput!
  ): UpdateContactWhenGeohashAvailablePayload

  """
  Updates a single `ContactWhenGeohashAvailable` using a unique key and a patch.
  """
  updateContactWhenGeohashAvailableById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactWhenGeohashAvailableByIdInput!
  ): UpdateContactWhenGeohashAvailablePayload

  """
  Updates a single `FlywaySchemaHistory` using its globally unique id and a patch.
  """
  updateFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `FlywaySchemaHistory` using a unique key and a patch."""
  updateFlywaySchemaHistoryByInstalledRank(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryByInstalledRankInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `Job` using its globally unique id and a patch."""
  updateJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobInput!
  ): UpdateJobPayload

  """Updates a single `Job` using a unique key and a patch."""
  updateJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobByIdInput!
  ): UpdateJobPayload

  """
  Updates a single `LogClientError` using its globally unique id and a patch.
  """
  updateLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogClientErrorInput!
  ): UpdateLogClientErrorPayload

  """Updates a single `LogClientError` using a unique key and a patch."""
  updateLogClientErrorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogClientErrorByIdInput!
  ): UpdateLogClientErrorPayload

  """Updates a single `Mechanic` using its globally unique id and a patch."""
  updateMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicInput!
  ): UpdateMechanicPayload

  """Updates a single `Mechanic` using a unique key and a patch."""
  updateMechanicById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicByIdInput!
  ): UpdateMechanicPayload

  """
  Updates a single `MechanicJob` using its globally unique id and a patch.
  """
  updateMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicJobInput!
  ): UpdateMechanicJobPayload

  """Updates a single `MechanicJob` using a unique key and a patch."""
  updateMechanicJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMechanicJobByIdInput!
  ): UpdateMechanicJobPayload

  """Updates a single `TimeSlot` using its globally unique id and a patch."""
  updateTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTimeSlotInput!
  ): UpdateTimeSlotPayload

  """Updates a single `TimeSlot` using a unique key and a patch."""
  updateTimeSlotById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTimeSlotByIdInput!
  ): UpdateTimeSlotPayload

  """
  Updates a single `WorkingTime` using its globally unique id and a patch.
  """
  updateWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkingTimeInput!
  ): UpdateWorkingTimePayload

  """Updates a single `WorkingTime` using a unique key and a patch."""
  updateWorkingTimeByMechanicIdAndTimeSlotId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkingTimeByMechanicIdAndTimeSlotIdInput!
  ): UpdateWorkingTimePayload

  """Deletes a single `Booking` using its globally unique id."""
  deleteBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingInput!
  ): DeleteBookingPayload

  """Deletes a single `Booking` using a unique key."""
  deleteBookingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingByIdInput!
  ): DeleteBookingPayload

  """Deletes a single `BookingJob` using its globally unique id."""
  deleteBookingJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingJobInput!
  ): DeleteBookingJobPayload

  """Deletes a single `BookingJob` using a unique key."""
  deleteBookingJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingJobByIdInput!
  ): DeleteBookingJobPayload

  """Deletes a single `Calendar` using its globally unique id."""
  deleteCalendar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalendarInput!
  ): DeleteCalendarPayload

  """Deletes a single `Calendar` using a unique key."""
  deleteCalendarByDateDimId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalendarByDateDimIdInput!
  ): DeleteCalendarPayload

  """
  Deletes a single `ContactWhenGeohashAvailable` using its globally unique id.
  """
  deleteContactWhenGeohashAvailable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactWhenGeohashAvailableInput!
  ): DeleteContactWhenGeohashAvailablePayload

  """Deletes a single `ContactWhenGeohashAvailable` using a unique key."""
  deleteContactWhenGeohashAvailableById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactWhenGeohashAvailableByIdInput!
  ): DeleteContactWhenGeohashAvailablePayload

  """Deletes a single `FlywaySchemaHistory` using its globally unique id."""
  deleteFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `FlywaySchemaHistory` using a unique key."""
  deleteFlywaySchemaHistoryByInstalledRank(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryByInstalledRankInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `Job` using its globally unique id."""
  deleteJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """Deletes a single `Job` using a unique key."""
  deleteJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobByIdInput!
  ): DeleteJobPayload

  """Deletes a single `LogClientError` using its globally unique id."""
  deleteLogClientError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogClientErrorInput!
  ): DeleteLogClientErrorPayload

  """Deletes a single `LogClientError` using a unique key."""
  deleteLogClientErrorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogClientErrorByIdInput!
  ): DeleteLogClientErrorPayload

  """Deletes a single `Mechanic` using its globally unique id."""
  deleteMechanic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicInput!
  ): DeleteMechanicPayload

  """Deletes a single `Mechanic` using a unique key."""
  deleteMechanicById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicByIdInput!
  ): DeleteMechanicPayload

  """Deletes a single `MechanicJob` using its globally unique id."""
  deleteMechanicJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicJobInput!
  ): DeleteMechanicJobPayload

  """Deletes a single `MechanicJob` using a unique key."""
  deleteMechanicJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMechanicJobByIdInput!
  ): DeleteMechanicJobPayload

  """Deletes a single `TimeSlot` using its globally unique id."""
  deleteTimeSlot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTimeSlotInput!
  ): DeleteTimeSlotPayload

  """Deletes a single `TimeSlot` using a unique key."""
  deleteTimeSlotById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTimeSlotByIdInput!
  ): DeleteTimeSlotPayload

  """Deletes a single `WorkingTime` using its globally unique id."""
  deleteWorkingTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkingTimeInput!
  ): DeleteWorkingTimePayload

  """Deletes a single `WorkingTime` using a unique key."""
  deleteWorkingTimeByMechanicIdAndTimeSlotId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkingTimeByMechanicIdAndTimeSlotIdInput!
  ): DeleteWorkingTimePayload
  makeBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeBookingInput!
  ): MakeBookingPayload
}

"""The output of our create `Booking` mutation."""
type CreateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was created by this mutation."""
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `Booking`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `Booking`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the create `Booking` mutation."""
input CreateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Booking` to be created by this mutation."""
  booking: BookingInput!
}

"""An input for mutations affecting `Booking`"""
input BookingInput {
  id: UUID
  mechanicId: UUID
  timeSlotId: String!
  status: BookingStatus
  longitude: Float!
  latitude: Float!
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int!
}

"""The output of our create `BookingJob` mutation."""
type CreateBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BookingJob` that was created by this mutation."""
  bookingJob: BookingJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Booking` that is related to this `BookingJob`."""
  bookingByBookingId: Booking

  """Reads a single `Job` that is related to this `BookingJob`."""
  jobByJobId: Job

  """An edge for our `BookingJob`. May be used by Relay 1."""
  bookingJobEdge(
    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""All input for the create `BookingJob` mutation."""
input CreateBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BookingJob` to be created by this mutation."""
  bookingJob: BookingJobInput!
}

"""An input for mutations affecting `BookingJob`"""
input BookingJobInput {
  id: UUID
  bookingId: UUID
  jobId: UUID
}

"""The output of our create `Calendar` mutation."""
type CreateCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Calendar` that was created by this mutation."""
  calendar: Calendar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Calendar`. May be used by Relay 1."""
  calendarEdge(
    """The method to use when ordering `Calendar`."""
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""All input for the create `Calendar` mutation."""
input CreateCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Calendar` to be created by this mutation."""
  calendar: CalendarInput!
}

"""An input for mutations affecting `Calendar`"""
input CalendarInput {
  dateDimId: Int!
  dateActual: Date!
  epoch: BigInt!
  daySuffix: String!
  dayName: String!
  dayOfWeek: Int!
  dayOfMonth: Int!
  dayOfQuarter: Int!
  dayOfYear: Int!
  weekOfMonth: Int!
  weekOfYear: Int!
  weekOfYearIso: String!
  monthActual: Int!
  monthName: String!
  monthNameAbbreviated: String!
  quarterActual: Int!
  quarterName: String!
  yearActual: Int!
  firstDayOfWeek: Date!
  lastDayOfWeek: Date!
  firstDayOfMonth: Date!
  lastDayOfMonth: Date!
  firstDayOfQuarter: Date!
  lastDayOfQuarter: Date!
  firstDayOfYear: Date!
  lastDayOfYear: Date!
  mmyyyy: String!
  mmddyyyy: String!
  weekendIndr: Boolean!
}

"""The output of our create `ContactWhenGeohashAvailable` mutation."""
type CreateContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContactWhenGeohashAvailable` that was created by this mutation."""
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1."""
  contactWhenGeohashAvailableEdge(
    """The method to use when ordering `ContactWhenGeohashAvailable`."""
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""All input for the create `ContactWhenGeohashAvailable` mutation."""
input CreateContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContactWhenGeohashAvailable` to be created by this mutation."""
  contactWhenGeohashAvailable: ContactWhenGeohashAvailableInput!
}

"""An input for mutations affecting `ContactWhenGeohashAvailable`"""
input ContactWhenGeohashAvailableInput {
  id: UUID
  geohash: String!
  email: String
  createdAt: Datetime
}

"""The output of our create `FlywaySchemaHistory` mutation."""
type CreateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the create `FlywaySchemaHistory` mutation."""
input CreateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` to be created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistoryInput!
}

"""An input for mutations affecting `FlywaySchemaHistory`"""
input FlywaySchemaHistoryInput {
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime
  executionTime: Int!
  success: Boolean!
}

"""The output of our create `Job` mutation."""
type CreateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was created by this mutation."""
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the create `Job` mutation."""
input CreateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Job` to be created by this mutation."""
  job: JobInput!
}

"""An input for mutations affecting `Job`"""
input JobInput {
  id: UUID
  description: String!
  minutesToComplete: Float!
  createdAt: Datetime
  price: Float
}

"""The output of our create `LogClientError` mutation."""
type CreateLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogClientError` that was created by this mutation."""
  logClientError: LogClientError

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LogClientError`. May be used by Relay 1."""
  logClientErrorEdge(
    """The method to use when ordering `LogClientError`."""
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""All input for the create `LogClientError` mutation."""
input CreateLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LogClientError` to be created by this mutation."""
  logClientError: LogClientErrorInput!
}

"""An input for mutations affecting `LogClientError`"""
input LogClientErrorInput {
  id: Int
  ts: Datetime
  context: JSON!
  error: JSON!
}

"""The output of our create `Mechanic` mutation."""
type CreateMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mechanic` that was created by this mutation."""
  mechanic: Mechanic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mechanic`. May be used by Relay 1."""
  mechanicEdge(
    """The method to use when ordering `Mechanic`."""
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""All input for the create `Mechanic` mutation."""
input CreateMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mechanic` to be created by this mutation."""
  mechanic: MechanicInput!
}

"""An input for mutations affecting `Mechanic`"""
input MechanicInput {
  id: UUID
  fullName: String!
  rating: Float
  createdAt: Datetime
  geohashes: [String]
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String
}

"""The output of our create `MechanicJob` mutation."""
type CreateMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MechanicJob` that was created by this mutation."""
  mechanicJob: MechanicJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `MechanicJob`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `Job` that is related to this `MechanicJob`."""
  jobByJobId: Job

  """An edge for our `MechanicJob`. May be used by Relay 1."""
  mechanicJobEdge(
    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""All input for the create `MechanicJob` mutation."""
input CreateMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MechanicJob` to be created by this mutation."""
  mechanicJob: MechanicJobInput!
}

"""An input for mutations affecting `MechanicJob`"""
input MechanicJobInput {
  id: UUID
  mechanicId: UUID
  jobId: UUID
}

"""The output of our create `TimeSlot` mutation."""
type CreateTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TimeSlot` that was created by this mutation."""
  timeSlot: TimeSlot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TimeSlot`. May be used by Relay 1."""
  timeSlotEdge(
    """The method to use when ordering `TimeSlot`."""
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""All input for the create `TimeSlot` mutation."""
input CreateTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TimeSlot` to be created by this mutation."""
  timeSlot: TimeSlotInput!
}

"""An input for mutations affecting `TimeSlot`"""
input TimeSlotInput {
  """E.g. 2019-12-31__09"""
  id: String!
  startTime: Datetime!
}

"""The output of our create `WorkingTime` mutation."""
type CreateWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WorkingTime` that was created by this mutation."""
  workingTime: WorkingTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `WorkingTime`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `WorkingTime`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `WorkingTime`. May be used by Relay 1."""
  workingTimeEdge(
    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""All input for the create `WorkingTime` mutation."""
input CreateWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WorkingTime` to be created by this mutation."""
  workingTime: WorkingTimeInput!
}

"""An input for mutations affecting `WorkingTime`"""
input WorkingTimeInput {
  id: UUID
  mechanicId: UUID!
  timeSlotId: String!
  minutes: Int
}

"""The output of our update `Booking` mutation."""
type UpdateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was updated by this mutation."""
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `Booking`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `Booking`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the `updateBooking` mutation."""
input UpdateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Booking` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Booking` being updated.
  """
  bookingPatch: BookingPatch!
}

"""
Represents an update to a `Booking`. Fields that are set will be updated.
"""
input BookingPatch {
  id: UUID
  mechanicId: UUID
  timeSlotId: String
  status: BookingStatus
  longitude: Float
  latitude: Float
  jobCompletedAt: Datetime
  paidAt: Datetime
  createdAt: Datetime
  jobStartedAt: Datetime
  address: String
  phone: String
  email: String
  carRegistrationNumber: String
  durationMinutes: Int
}

"""All input for the `updateBookingById` mutation."""
input UpdateBookingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Booking` being updated.
  """
  bookingPatch: BookingPatch!
  id: UUID!
}

"""The output of our update `BookingJob` mutation."""
type UpdateBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BookingJob` that was updated by this mutation."""
  bookingJob: BookingJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Booking` that is related to this `BookingJob`."""
  bookingByBookingId: Booking

  """Reads a single `Job` that is related to this `BookingJob`."""
  jobByJobId: Job

  """An edge for our `BookingJob`. May be used by Relay 1."""
  bookingJobEdge(
    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""All input for the `updateBookingJob` mutation."""
input UpdateBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BookingJob` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BookingJob` being updated.
  """
  bookingJobPatch: BookingJobPatch!
}

"""
Represents an update to a `BookingJob`. Fields that are set will be updated.
"""
input BookingJobPatch {
  id: UUID
  bookingId: UUID
  jobId: UUID
}

"""All input for the `updateBookingJobById` mutation."""
input UpdateBookingJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BookingJob` being updated.
  """
  bookingJobPatch: BookingJobPatch!
  id: UUID!
}

"""The output of our update `Calendar` mutation."""
type UpdateCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Calendar` that was updated by this mutation."""
  calendar: Calendar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Calendar`. May be used by Relay 1."""
  calendarEdge(
    """The method to use when ordering `Calendar`."""
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""All input for the `updateCalendar` mutation."""
input UpdateCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Calendar` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Calendar` being updated.
  """
  calendarPatch: CalendarPatch!
}

"""
Represents an update to a `Calendar`. Fields that are set will be updated.
"""
input CalendarPatch {
  dateDimId: Int
  dateActual: Date
  epoch: BigInt
  daySuffix: String
  dayName: String
  dayOfWeek: Int
  dayOfMonth: Int
  dayOfQuarter: Int
  dayOfYear: Int
  weekOfMonth: Int
  weekOfYear: Int
  weekOfYearIso: String
  monthActual: Int
  monthName: String
  monthNameAbbreviated: String
  quarterActual: Int
  quarterName: String
  yearActual: Int
  firstDayOfWeek: Date
  lastDayOfWeek: Date
  firstDayOfMonth: Date
  lastDayOfMonth: Date
  firstDayOfQuarter: Date
  lastDayOfQuarter: Date
  firstDayOfYear: Date
  lastDayOfYear: Date
  mmyyyy: String
  mmddyyyy: String
  weekendIndr: Boolean
}

"""All input for the `updateCalendarByDateDimId` mutation."""
input UpdateCalendarByDateDimIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Calendar` being updated.
  """
  calendarPatch: CalendarPatch!
  dateDimId: Int!
}

"""The output of our update `ContactWhenGeohashAvailable` mutation."""
type UpdateContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContactWhenGeohashAvailable` that was updated by this mutation."""
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1."""
  contactWhenGeohashAvailableEdge(
    """The method to use when ordering `ContactWhenGeohashAvailable`."""
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""All input for the `updateContactWhenGeohashAvailable` mutation."""
input UpdateContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContactWhenGeohashAvailable` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ContactWhenGeohashAvailable` being updated.
  """
  contactWhenGeohashAvailablePatch: ContactWhenGeohashAvailablePatch!
}

"""
Represents an update to a `ContactWhenGeohashAvailable`. Fields that are set will be updated.
"""
input ContactWhenGeohashAvailablePatch {
  id: UUID
  geohash: String
  email: String
  createdAt: Datetime
}

"""All input for the `updateContactWhenGeohashAvailableById` mutation."""
input UpdateContactWhenGeohashAvailableByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContactWhenGeohashAvailable` being updated.
  """
  contactWhenGeohashAvailablePatch: ContactWhenGeohashAvailablePatch!
  id: UUID!
}

"""The output of our update `FlywaySchemaHistory` mutation."""
type UpdateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was updated by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the `updateFlywaySchemaHistory` mutation."""
input UpdateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  flywaySchemaHistoryPatch: FlywaySchemaHistoryPatch!
}

"""
Represents an update to a `FlywaySchemaHistory`. Fields that are set will be updated.
"""
input FlywaySchemaHistoryPatch {
  installedRank: Int
  version: String
  description: String
  type: String
  script: String
  checksum: Int
  installedBy: String
  installedOn: Datetime
  executionTime: Int
  success: Boolean
}

"""All input for the `updateFlywaySchemaHistoryByInstalledRank` mutation."""
input UpdateFlywaySchemaHistoryByInstalledRankInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  flywaySchemaHistoryPatch: FlywaySchemaHistoryPatch!
  installedRank: Int!
}

"""The output of our update `Job` mutation."""
type UpdateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was updated by this mutation."""
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the `updateJob` mutation."""
input UpdateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  jobPatch: JobPatch!
}

"""Represents an update to a `Job`. Fields that are set will be updated."""
input JobPatch {
  id: UUID
  description: String
  minutesToComplete: Float
  createdAt: Datetime
  price: Float
}

"""All input for the `updateJobById` mutation."""
input UpdateJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  jobPatch: JobPatch!
  id: UUID!
}

"""The output of our update `LogClientError` mutation."""
type UpdateLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogClientError` that was updated by this mutation."""
  logClientError: LogClientError

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LogClientError`. May be used by Relay 1."""
  logClientErrorEdge(
    """The method to use when ordering `LogClientError`."""
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""All input for the `updateLogClientError` mutation."""
input UpdateLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LogClientError` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LogClientError` being updated.
  """
  logClientErrorPatch: LogClientErrorPatch!
}

"""
Represents an update to a `LogClientError`. Fields that are set will be updated.
"""
input LogClientErrorPatch {
  id: Int
  ts: Datetime
  context: JSON
  error: JSON
}

"""All input for the `updateLogClientErrorById` mutation."""
input UpdateLogClientErrorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LogClientError` being updated.
  """
  logClientErrorPatch: LogClientErrorPatch!
  id: Int!
}

"""The output of our update `Mechanic` mutation."""
type UpdateMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mechanic` that was updated by this mutation."""
  mechanic: Mechanic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mechanic`. May be used by Relay 1."""
  mechanicEdge(
    """The method to use when ordering `Mechanic`."""
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""All input for the `updateMechanic` mutation."""
input UpdateMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mechanic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Mechanic` being updated.
  """
  mechanicPatch: MechanicPatch!
}

"""
Represents an update to a `Mechanic`. Fields that are set will be updated.
"""
input MechanicPatch {
  id: UUID
  fullName: String
  rating: Float
  createdAt: Datetime
  geohashes: [String]
  travelTimeMinutes: Int
  pictureUrl: String
  email: String
  phone: String
  address: String
}

"""All input for the `updateMechanicById` mutation."""
input UpdateMechanicByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mechanic` being updated.
  """
  mechanicPatch: MechanicPatch!
  id: UUID!
}

"""The output of our update `MechanicJob` mutation."""
type UpdateMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MechanicJob` that was updated by this mutation."""
  mechanicJob: MechanicJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `MechanicJob`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `Job` that is related to this `MechanicJob`."""
  jobByJobId: Job

  """An edge for our `MechanicJob`. May be used by Relay 1."""
  mechanicJobEdge(
    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""All input for the `updateMechanicJob` mutation."""
input UpdateMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MechanicJob` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MechanicJob` being updated.
  """
  mechanicJobPatch: MechanicJobPatch!
}

"""
Represents an update to a `MechanicJob`. Fields that are set will be updated.
"""
input MechanicJobPatch {
  id: UUID
  mechanicId: UUID
  jobId: UUID
}

"""All input for the `updateMechanicJobById` mutation."""
input UpdateMechanicJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MechanicJob` being updated.
  """
  mechanicJobPatch: MechanicJobPatch!
  id: UUID!
}

"""The output of our update `TimeSlot` mutation."""
type UpdateTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TimeSlot` that was updated by this mutation."""
  timeSlot: TimeSlot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TimeSlot`. May be used by Relay 1."""
  timeSlotEdge(
    """The method to use when ordering `TimeSlot`."""
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""All input for the `updateTimeSlot` mutation."""
input UpdateTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TimeSlot` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TimeSlot` being updated.
  """
  timeSlotPatch: TimeSlotPatch!
}

"""
Represents an update to a `TimeSlot`. Fields that are set will be updated.
"""
input TimeSlotPatch {
  """E.g. 2019-12-31__09"""
  id: String
  startTime: Datetime
}

"""All input for the `updateTimeSlotById` mutation."""
input UpdateTimeSlotByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TimeSlot` being updated.
  """
  timeSlotPatch: TimeSlotPatch!

  """E.g. 2019-12-31__09"""
  id: String!
}

"""The output of our update `WorkingTime` mutation."""
type UpdateWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WorkingTime` that was updated by this mutation."""
  workingTime: WorkingTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `WorkingTime`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `WorkingTime`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `WorkingTime`. May be used by Relay 1."""
  workingTimeEdge(
    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""All input for the `updateWorkingTime` mutation."""
input UpdateWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WorkingTime` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WorkingTime` being updated.
  """
  workingTimePatch: WorkingTimePatch!
}

"""
Represents an update to a `WorkingTime`. Fields that are set will be updated.
"""
input WorkingTimePatch {
  id: UUID
  mechanicId: UUID
  timeSlotId: String
  minutes: Int
}

"""
All input for the `updateWorkingTimeByMechanicIdAndTimeSlotId` mutation.
"""
input UpdateWorkingTimeByMechanicIdAndTimeSlotIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WorkingTime` being updated.
  """
  workingTimePatch: WorkingTimePatch!
  mechanicId: UUID!
  timeSlotId: String!
}

"""The output of our delete `Booking` mutation."""
type DeleteBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was deleted by this mutation."""
  booking: Booking
  deletedBookingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `Booking`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `Booking`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the `deleteBooking` mutation."""
input DeleteBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Booking` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBookingById` mutation."""
input DeleteBookingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `BookingJob` mutation."""
type DeleteBookingJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BookingJob` that was deleted by this mutation."""
  bookingJob: BookingJob
  deletedBookingJobId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Booking` that is related to this `BookingJob`."""
  bookingByBookingId: Booking

  """Reads a single `Job` that is related to this `BookingJob`."""
  jobByJobId: Job

  """An edge for our `BookingJob`. May be used by Relay 1."""
  bookingJobEdge(
    """The method to use when ordering `BookingJob`."""
    orderBy: [BookingJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingJobsEdge
}

"""All input for the `deleteBookingJob` mutation."""
input DeleteBookingJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BookingJob` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBookingJobById` mutation."""
input DeleteBookingJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Calendar` mutation."""
type DeleteCalendarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Calendar` that was deleted by this mutation."""
  calendar: Calendar
  deletedCalendarId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Calendar`. May be used by Relay 1."""
  calendarEdge(
    """The method to use when ordering `Calendar`."""
    orderBy: [CalendarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalendarsEdge
}

"""All input for the `deleteCalendar` mutation."""
input DeleteCalendarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Calendar` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCalendarByDateDimId` mutation."""
input DeleteCalendarByDateDimIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateDimId: Int!
}

"""The output of our delete `ContactWhenGeohashAvailable` mutation."""
type DeleteContactWhenGeohashAvailablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContactWhenGeohashAvailable` that was deleted by this mutation."""
  contactWhenGeohashAvailable: ContactWhenGeohashAvailable
  deletedContactWhenGeohashAvailableId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContactWhenGeohashAvailable`. May be used by Relay 1."""
  contactWhenGeohashAvailableEdge(
    """The method to use when ordering `ContactWhenGeohashAvailable`."""
    orderBy: [ContactWhenGeohashAvailablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactWhenGeohashAvailablesEdge
}

"""All input for the `deleteContactWhenGeohashAvailable` mutation."""
input DeleteContactWhenGeohashAvailableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContactWhenGeohashAvailable` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteContactWhenGeohashAvailableById` mutation."""
input DeleteContactWhenGeohashAvailableByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `FlywaySchemaHistory` mutation."""
type DeleteFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was deleted by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory
  deletedFlywaySchemaHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the `deleteFlywaySchemaHistory` mutation."""
input DeleteFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFlywaySchemaHistoryByInstalledRank` mutation."""
input DeleteFlywaySchemaHistoryByInstalledRankInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!
}

"""The output of our delete `Job` mutation."""
type DeleteJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was deleted by this mutation."""
  job: Job
  deletedJobId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the `deleteJob` mutation."""
input DeleteJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteJobById` mutation."""
input DeleteJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `LogClientError` mutation."""
type DeleteLogClientErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogClientError` that was deleted by this mutation."""
  logClientError: LogClientError
  deletedLogClientErrorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LogClientError`. May be used by Relay 1."""
  logClientErrorEdge(
    """The method to use when ordering `LogClientError`."""
    orderBy: [LogClientErrorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogClientErrorsEdge
}

"""All input for the `deleteLogClientError` mutation."""
input DeleteLogClientErrorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LogClientError` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLogClientErrorById` mutation."""
input DeleteLogClientErrorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Mechanic` mutation."""
type DeleteMechanicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mechanic` that was deleted by this mutation."""
  mechanic: Mechanic
  deletedMechanicId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mechanic`. May be used by Relay 1."""
  mechanicEdge(
    """The method to use when ordering `Mechanic`."""
    orderBy: [MechanicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicsEdge
}

"""All input for the `deleteMechanic` mutation."""
input DeleteMechanicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mechanic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMechanicById` mutation."""
input DeleteMechanicByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `MechanicJob` mutation."""
type DeleteMechanicJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MechanicJob` that was deleted by this mutation."""
  mechanicJob: MechanicJob
  deletedMechanicJobId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `MechanicJob`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `Job` that is related to this `MechanicJob`."""
  jobByJobId: Job

  """An edge for our `MechanicJob`. May be used by Relay 1."""
  mechanicJobEdge(
    """The method to use when ordering `MechanicJob`."""
    orderBy: [MechanicJobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MechanicJobsEdge
}

"""All input for the `deleteMechanicJob` mutation."""
input DeleteMechanicJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MechanicJob` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMechanicJobById` mutation."""
input DeleteMechanicJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `TimeSlot` mutation."""
type DeleteTimeSlotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TimeSlot` that was deleted by this mutation."""
  timeSlot: TimeSlot
  deletedTimeSlotId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TimeSlot`. May be used by Relay 1."""
  timeSlotEdge(
    """The method to use when ordering `TimeSlot`."""
    orderBy: [TimeSlotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TimeSlotsEdge
}

"""All input for the `deleteTimeSlot` mutation."""
input DeleteTimeSlotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TimeSlot` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTimeSlotById` mutation."""
input DeleteTimeSlotByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """E.g. 2019-12-31__09"""
  id: String!
}

"""The output of our delete `WorkingTime` mutation."""
type DeleteWorkingTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WorkingTime` that was deleted by this mutation."""
  workingTime: WorkingTime
  deletedWorkingTimeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `WorkingTime`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `WorkingTime`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `WorkingTime`. May be used by Relay 1."""
  workingTimeEdge(
    """The method to use when ordering `WorkingTime`."""
    orderBy: [WorkingTimesOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkingTimesEdge
}

"""All input for the `deleteWorkingTime` mutation."""
input DeleteWorkingTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WorkingTime` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteWorkingTimeByMechanicIdAndTimeSlotId` mutation.
"""
input DeleteWorkingTimeByMechanicIdAndTimeSlotIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mechanicId: UUID!
  timeSlotId: String!
}

"""The output of our `makeBooking` mutation."""
type MakeBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mechanic` that is related to this `Booking`."""
  mechanicByMechanicId: Mechanic

  """Reads a single `TimeSlot` that is related to this `Booking`."""
  timeSlotByTimeSlotId: TimeSlot

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the `makeBooking` mutation."""
input MakeBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mechanicId: UUID!
  timeSlotId: String!
  jobIds: [UUID]!
  longitude: Float!
  latitude: Float!
}
